import "std/math" as math
import "std/concurrency" as { all }

slice := fn (mut list, mut start = 0, mut end = (list.length)) {
  while start != 0 {
    start--
    end--
    _, ...list = list
  }

  while end != list.length {
    ...list, _ = list
  }

  list
}

reduce := fn list, reducer, merge, initial {
  len := list.length
  if len == 0 do return initial

  midpoint := math.floor(len / 2)
  item := list[midpoint]
  first, second := all(
    | (self (slice(list, 0, midpoint)) reducer merge initial)
    | (self (slice(list, midpoint + 1)) reducer merge initial)
  )

  merge (reducer first item) second
}

filter := fn list, predicate {
  reduce list (fn acc, item -> if predicate item do (...acc, item) else acc) (fn first, second -> (...first, ...second)) ()
}

map := fn list, mapper {
  reduce list (fn acc, item -> (...acc, mapper item)) (fn first, second -> (...first, ...second)) ()
}

flat_map := fn list, mapper {
  reduce list (fn acc, item -> (...acc, ...mapper item)) (fn first, second -> (...first, ...second)) ()
}

sum := fn list {
  reduce list (fn acc, item -> acc + item) (fn first, second -> first + second) 0
}

// https://adventofcode.com/2023/day/1

// take first and last digit on line, concat into two-digit number
// and sum all numbers in document
document := "
  1abc2\
  pqr3stu8vwx\
  a1b2c3d4e5f\
  treb7uchet\
"

lines := {
  mut lines := document.split("\n")
  lines = map lines fn line do line.replace "\\s+" ""
  filter lines fn line do line != ""
}

numbers := flat_map lines fn mut line {
  digits := ()

  while line != "" {
    if line.char_at(0).match("\\d") {
      digit := number(line.char_at(0))
      if !(0 in digits) do digits[0] = digit
      digits[1] = digit
    }
    line = line.slice(1,)
  }

  digits[0] * 10, digits[1]
}

sum numbers
