// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compilation > function application and literal print > compiled 1`] = `
"@const_55 = constant [4 x i8] c"%i
\\00"
@const_59 = constant i32 2
define i32 @main() {
  main: 
    %var_60 = load i32, i32* @const_59
    %var_61 = call i32 @fn_57(i32 %var_60)
    %var_62 = call i32 @printInt(i32 %var_61)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32) {
  entry: 
    %var_56 = call i32 @printf(i8* @const_55, i32 %0)
    ret i32 %var_56
}
define i32 @fn_57(i32) {
  entry: 
    %var_58 = add i32 %0, %0
    ret i32 %var_58
}
"
`;

exports[`compilation > function application and literal print > stderr 1`] = `[]`;

exports[`compilation > function application and literal print > stdout 1`] = `
[
  "4
",
]
`;

exports[`compilation > function closure  > compiled 1`] = `
"@const_73 = constant [4 x i8] c"%i
\\00"
@const_81 = constant i32 2
@const_88 = constant i32 1
define i32 @main() {
  main: 
    %var_89 = load i32, i32* @const_88
    %var_90 = call { { i32 }, i32 ({ i32 }, i32)* } @fn_75(i32 %var_89)
    %var_91 = extractvalue { { i32 }, i32 ({ i32 }, i32)* } %var_90, 0
    %var_92 = extractvalue { { i32 }, i32 ({ i32 }, i32)* } %var_90, 1
    %var_93 = call i32 %var_92({ i32 } %var_91, i32 @const_81)
    %var_94 = call i32 @printInt(i32 %var_93)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32) {
  entry: 
    %var_74 = call i32 @printf(i8* @const_73, i32 %0)
    ret i32 %var_74
}
define { { i32 }, i32 ({ i32 }, i32)* } @fn_75(i32) {
  entry: 
    %var_77 = alloca { i32 }, { i32 } undefined
    %var_78 = load i32, ptr %var_77
    %var_79 = insertvalue i32 %var_78, i32 %0, 0
    store i32 %var_78, ptr %var_77
    %var_84 = alloca { { i32 }, i32 ({ i32 }, i32)* }, { { i32 }, i32 ({ i32 }, i32)* } undefined
    %var_85 = load i32, ptr %var_84
    %var_86 = insertvalue i32 %var_85, { i32 } %var_78, 0
    %var_87 = insertvalue i32 %var_85, i32 ({ i32 }, i32)* @fn_76, 1
    store i32 %var_85, ptr %var_84
    ret { { i32 }, i32 ({ i32 }, i32)* } %var_85
}
define i32 @fn_76({ i32 }, i32) {
  entry: 
    %var_80 = extractvalue i32 %0, 0
    %var_82 = mul i32* @const_81, %var_80
    %var_83 = add i32 %1, %var_82
    ret i32 %var_83
}
"
`;

exports[`compilation > function closure  > stderr 1`] = `
[
  "lli: <stdin>:11:53: error: global variable reference must have pointer type
    %var_93 = call i32 %var_92({ i32 } %var_91, i32 @const_81)
                                                    ^

",
]
`;

exports[`compilation > function closure  > stdout 1`] = `[]`;

exports[`compilation > hello world > compiled 1`] = `
"@const_11 = constant [4 x i8] c"%i
\\00"
@const_13 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    %var_14 = call i32 @printf(i8* @const_13)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32) {
  entry: 
    %var_12 = call i32 @printf(i8* @const_11, i32 %0)
    ret i32 %var_12
}
"
`;

exports[`compilation > hello world > stderr 1`] = `[]`;

exports[`compilation > hello world > stdout 1`] = `
[
  "hello world!",
]
`;

exports[`compilation > hello world string > compiled 1`] = `
"@const_6 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    ret i32 0
}
"
`;

exports[`compilation > hello world string > stderr 1`] = `[]`;

exports[`compilation > hello world string > stdout 1`] = `[]`;

exports[`compilation > hello world twice > compiled 1`] = `
"@const_25 = constant [4 x i8] c"%i
\\00"
@const_27 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    %var_28 = call i32 @printf(i8* @const_27)
    %var_29 = call i32 @printf(i8* @const_27)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32) {
  entry: 
    %var_26 = call i32 @printf(i8* @const_25, i32 %0)
    ret i32 %var_26
}
"
`;

exports[`compilation > hello world twice > stderr 1`] = `[]`;

exports[`compilation > hello world twice > stdout 1`] = `
[
  "hello world!hello world!",
]
`;

exports[`compilation > two prints > compiled 1`] = `
"@const_25 = constant [4 x i8] c"%i
\\00"
@const_27 = constant [13 x i8] c"hello world!\\00"
@const_29 = constant [15 x i8] c"hello world 2!\\00"
define i32 @main() {
  main: 
    %var_28 = call i32 @printf(i8* @const_27)
    %var_30 = call i32 @printf(i8* @const_29)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32) {
  entry: 
    %var_26 = call i32 @printf(i8* @const_25, i32 %0)
    ret i32 %var_26
}
"
`;

exports[`compilation > two prints > stderr 1`] = `[]`;

exports[`compilation > two prints > stdout 1`] = `
[
  "hello world!hello world 2!",
]
`;
