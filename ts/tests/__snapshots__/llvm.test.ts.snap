// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compilation > function application and literal print > compiled 1`] = `
"@const_58 = constant [4 x i8] c"%i
\\00"
@const_63 = constant i32 2
define i32 @main() {
  main: 
    %var_64 = load i32, ptr @const_63
    %var_65 = call i32 @fn_60(i32 %var_64)
    %var_66 = call i32 @printInt(i32 %var_65)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32 %var_57) {
  entry: 
    %var_59 = call i32 @printf(i8* @const_58, i32 %var_57)
    ret i32 %var_59
}
define i32 @fn_60(i32 %var_61) {
  entry: 
    %var_62 = add i32 %var_61, %var_61
    ret i32 %var_62
}
"
`;

exports[`compilation > function application and literal print > stderr 1`] = `[]`;

exports[`compilation > function application and literal print > stdout 1`] = `
[
  "4
",
]
`;

exports[`compilation > function closure > compiled 1`] = `
"@const_76 = constant [4 x i8] c"%i
\\00"
@const_87 = constant i32 2
@const_96 = constant i32 1
define i32 @main() {
  main: 
    %var_97 = load i32, ptr @const_96
    %var_98 = alloca { { i32 }, i32 ({ i32 }, i32)* }
    call void @fn_78({ { i32 }, i32 ({ i32 }, i32)* }* %var_98, i32 %var_97)
    %var_99 = load { { i32 }, i32 ({ i32 }, i32)* }, ptr %var_98
    %var_100 = extractvalue { { i32 }, i32 ({ i32 }, i32)* } %var_99, 0
    %var_101 = extractvalue { { i32 }, i32 ({ i32 }, i32)* } %var_99, 1
    %var_102 = load i32, ptr @const_87
    %var_103 = call i32 %var_101({ i32 } %var_100, i32 %var_102)
    %var_104 = call i32 @printInt(i32 %var_103)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32 %var_75) {
  entry: 
    %var_77 = call i32 @printf(i8* @const_76, i32 %var_75)
    ret i32 %var_77
}
define void @fn_78(ptr sret({ { i32 }, i32 ({ i32 }, i32)* }) %var_95, i32 %var_79) {
  entry: 
    %var_81 = alloca { i32 }
    %var_82 = load { i32 }, ptr %var_81
    %var_83 = insertvalue { i32 } %var_82, i32 %var_79, 0
    store { i32 } %var_83, ptr %var_81
    %var_91 = alloca { { i32 }, i32 ({ i32 }, i32)* }
    %var_92 = load { { i32 }, i32 ({ i32 }, i32)* }, ptr %var_91
    %var_93 = insertvalue { { i32 }, i32 ({ i32 }, i32)* } %var_92, { i32 } %var_83, 0
    %var_94 = insertvalue { { i32 }, i32 ({ i32 }, i32)* } %var_93, i32 ({ i32 }, i32)* @fn_80, 1
    store { { i32 }, i32 ({ i32 }, i32)* } %var_94, ptr %var_91
    store { { i32 }, i32 ({ i32 }, i32)* } %var_94, ptr %var_95
    ret void
}
define i32 @fn_80({ i32 } %var_84, i32 %var_85) {
  entry: 
    %var_86 = extractvalue { i32 } %var_84, 0
    %var_88 = load i32, ptr @const_87
    %var_89 = mul i32 %var_88, %var_86
    %var_90 = add i32 %var_85, %var_89
    ret i32 %var_90
}
"
`;

exports[`compilation > function closure > stderr 1`] = `[]`;

exports[`compilation > function closure > stdout 1`] = `
[
  "4
",
]
`;

exports[`compilation > function deep closure > compiled 1`] = `
"@const_93 = constant [4 x i8] c"%i
\\00"
@const_125 = constant i32 1
@const_129 = constant i32 3
@const_135 = constant i32 5
define i32 @main() {
  main: 
    %var_126 = load i32, ptr @const_125
    %var_127 = alloca { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* }
    call void @fn_95({ { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* }* %var_127, i32 %var_126)
    %var_128 = load { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* }, ptr %var_127
    %var_130 = extractvalue { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* } %var_128, 0
    %var_131 = extractvalue { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* } %var_128, 1
    %var_132 = load i32, ptr @const_129
    %var_133 = alloca { { i32, i32 }, i32 ({ i32, i32 }, i32)* }
    call void %var_131({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }* %var_133, { i32 } %var_130, i32 %var_132)
    %var_134 = load { { i32, i32 }, i32 ({ i32, i32 }, i32)* }, ptr %var_133
    %var_136 = extractvalue { { i32, i32 }, i32 ({ i32, i32 }, i32)* } %var_134, 0
    %var_137 = extractvalue { { i32, i32 }, i32 ({ i32, i32 }, i32)* } %var_134, 1
    %var_138 = load i32, ptr @const_135
    %var_139 = call i32 %var_137({ i32, i32 } %var_136, i32 %var_138)
    %var_140 = call i32 @printInt(i32 %var_139)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32 %var_92) {
  entry: 
    %var_94 = call i32 @printf(i8* @const_93, i32 %var_92)
    ret i32 %var_94
}
define void @fn_95(ptr sret({ { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* }) %var_124, i32 %var_96) {
  entry: 
    %var_98 = alloca { i32 }
    %var_99 = load { i32 }, ptr %var_98
    %var_100 = insertvalue { i32 } %var_99, i32 %var_96, 0
    store { i32 } %var_100, ptr %var_98
    %var_120 = alloca { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* }
    %var_121 = load { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* }, ptr %var_120
    %var_122 = insertvalue { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* } %var_121, { i32 } %var_100, 0
    %var_123 = insertvalue { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* } %var_122, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* @fn_97, 1
    store { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* } %var_123, ptr %var_120
    store { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* } %var_123, ptr %var_124
    ret void
}
define void @fn_97(ptr sret({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }) %var_119, { i32 } %var_101, i32 %var_102) {
  entry: 
    %var_103 = extractvalue { i32 } %var_101, 0
    %var_105 = alloca { i32, i32 }
    %var_106 = load { i32, i32 }, ptr %var_105
    %var_107 = insertvalue { i32, i32 } %var_106, i32 %var_103, 0
    %var_108 = insertvalue { i32, i32 } %var_107, i32 %var_102, 1
    store { i32, i32 } %var_108, ptr %var_105
    %var_115 = alloca { { i32, i32 }, i32 ({ i32, i32 }, i32)* }
    %var_116 = load { { i32, i32 }, i32 ({ i32, i32 }, i32)* }, ptr %var_115
    %var_117 = insertvalue { { i32, i32 }, i32 ({ i32, i32 }, i32)* } %var_116, { i32, i32 } %var_108, 0
    %var_118 = insertvalue { { i32, i32 }, i32 ({ i32, i32 }, i32)* } %var_117, i32 ({ i32, i32 }, i32)* @fn_104, 1
    store { { i32, i32 }, i32 ({ i32, i32 }, i32)* } %var_118, ptr %var_115
    store { { i32, i32 }, i32 ({ i32, i32 }, i32)* } %var_118, ptr %var_119
    ret void
}
define i32 @fn_104({ i32, i32 } %var_109, i32 %var_110) {
  entry: 
    %var_111 = extractvalue { i32, i32 } %var_109, 0
    %var_112 = extractvalue { i32, i32 } %var_109, 1
    %var_113 = add i32 %var_111, %var_112
    %var_114 = add i32 %var_113, %var_110
    ret i32 %var_114
}
"
`;

exports[`compilation > function deep closure > stderr 1`] = `[]`;

exports[`compilation > function deep closure > stdout 1`] = `
[
  "9
",
]
`;

exports[`compilation > hello world > compiled 1`] = `
"@const_12 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    %var_13 = call i32 @printf(i8* @const_12)
    ret i32 0
}
declare i32 @printf(i8*, ...)
"
`;

exports[`compilation > hello world > stderr 1`] = `[]`;

exports[`compilation > hello world > stdout 1`] = `
[
  "hello world!",
]
`;

exports[`compilation > hello world string > compiled 1`] = `
"@const_6 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    ret i32 0
}
"
`;

exports[`compilation > hello world string > stderr 1`] = `[]`;

exports[`compilation > hello world string > stdout 1`] = `[]`;

exports[`compilation > hello world twice > compiled 1`] = `
"@const_35 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    %var_31 = alloca { void (i32*, ptr, ptr)*, ptr }
    %var_32 = load { void (i32*, ptr, ptr)*, ptr }, ptr %var_31
    %var_33 = insertvalue { void (i32*, ptr, ptr)*, ptr } %var_32, void (i32*, ptr, ptr)* @printString, 0
    %var_34 = insertvalue { void (i32*, ptr, ptr)*, ptr } %var_33, ptr null, 1
    store { void (i32*, ptr, ptr)*, ptr } %var_34, ptr %var_31
    %var_36 = extractvalue { void (i32*, ptr, ptr)*, ptr } %var_34, 0
    %var_37 = extractvalue { void (i32*, ptr, ptr)*, ptr } %var_34, 1
    %var_38 = alloca i32
    call void %var_36(i32* %var_38, ptr %var_37, ptr @const_35)
    %var_39 = load i32, ptr %var_38
    %var_40 = alloca { void (i32*, ptr, ptr)*, ptr }
    %var_41 = load { void (i32*, ptr, ptr)*, ptr }, ptr %var_40
    %var_42 = insertvalue { void (i32*, ptr, ptr)*, ptr } %var_41, void (i32*, ptr, ptr)* @printString, 0
    %var_43 = insertvalue { void (i32*, ptr, ptr)*, ptr } %var_42, ptr null, 1
    store { void (i32*, ptr, ptr)*, ptr } %var_43, ptr %var_40
    %var_44 = extractvalue { void (i32*, ptr, ptr)*, ptr } %var_43, 0
    %var_45 = extractvalue { void (i32*, ptr, ptr)*, ptr } %var_43, 1
    %var_46 = alloca i32
    call void %var_44(i32* %var_46, ptr %var_45, ptr @const_35)
    %var_47 = load i32, ptr %var_46
    ret i32 0
}
declare i32 @printf(i8*, ...)
define void @printString(ptr sret(i32) %var_27, ptr %var_28, ptr %var_29) {
  entry: 
    %var_30 = call i32 @printf(i8* %var_29)
    store i32 %var_30, ptr %var_27
    ret void
}
"
`;

exports[`compilation > hello world twice > stderr 1`] = `[]`;

exports[`compilation > hello world twice > stdout 1`] = `
[
  "hello world!hello world!",
]
`;

exports[`compilation > print number > compiled 1`] = `
"@const_13 = constant [4 x i8] c"%i
\\00"
@const_19 = constant i32 1
define i32 @main() {
  main: 
    %var_15 = alloca { void (i32*, ptr, i32)*, ptr }
    %var_16 = load { void (i32*, ptr, i32)*, ptr }, ptr %var_15
    %var_17 = insertvalue { void (i32*, ptr, i32)*, ptr } %var_16, void (i32*, ptr, i32)* @printInt, 0
    %var_18 = insertvalue { void (i32*, ptr, i32)*, ptr } %var_17, ptr null, 1
    store { void (i32*, ptr, i32)*, ptr } %var_18, ptr %var_15
    %var_20 = load i32, ptr @const_19
    %var_21 = extractvalue { void (i32*, ptr, i32)*, ptr } %var_18, 0
    %var_22 = extractvalue { void (i32*, ptr, i32)*, ptr } %var_18, 1
    %var_23 = alloca i32
    call void %var_21(i32* %var_23, ptr %var_22, i32 %var_20)
    %var_24 = load i32, ptr %var_23
    ret i32 0
}
declare i32 @printf(i8*, ...)
define void @printInt(ptr sret(i32) %var_10, ptr %var_11, i32 %var_12) {
  entry: 
    %var_14 = call i32 @printf(i8* @const_13, i32 %var_12)
    store i32 %var_14, ptr %var_10
    ret void
}
"
`;

exports[`compilation > print number > stderr 1`] = `[]`;

exports[`compilation > print number > stdout 1`] = `
[
  "1
",
]
`;

exports[`compilation > two prints > compiled 1`] = `
"@const_35 = constant [13 x i8] c"hello world!\\00"
@const_44 = constant [15 x i8] c"hello world 2!\\00"
define i32 @main() {
  main: 
    %var_31 = alloca { void (i32*, ptr, ptr)*, ptr }
    %var_32 = load { void (i32*, ptr, ptr)*, ptr }, ptr %var_31
    %var_33 = insertvalue { void (i32*, ptr, ptr)*, ptr } %var_32, void (i32*, ptr, ptr)* @printString, 0
    %var_34 = insertvalue { void (i32*, ptr, ptr)*, ptr } %var_33, ptr null, 1
    store { void (i32*, ptr, ptr)*, ptr } %var_34, ptr %var_31
    %var_36 = extractvalue { void (i32*, ptr, ptr)*, ptr } %var_34, 0
    %var_37 = extractvalue { void (i32*, ptr, ptr)*, ptr } %var_34, 1
    %var_38 = alloca i32
    call void %var_36(i32* %var_38, ptr %var_37, ptr @const_35)
    %var_39 = load i32, ptr %var_38
    %var_40 = alloca { void (i32*, ptr, ptr)*, ptr }
    %var_41 = load { void (i32*, ptr, ptr)*, ptr }, ptr %var_40
    %var_42 = insertvalue { void (i32*, ptr, ptr)*, ptr } %var_41, void (i32*, ptr, ptr)* @printString, 0
    %var_43 = insertvalue { void (i32*, ptr, ptr)*, ptr } %var_42, ptr null, 1
    store { void (i32*, ptr, ptr)*, ptr } %var_43, ptr %var_40
    %var_45 = extractvalue { void (i32*, ptr, ptr)*, ptr } %var_43, 0
    %var_46 = extractvalue { void (i32*, ptr, ptr)*, ptr } %var_43, 1
    %var_47 = alloca i32
    call void %var_45(i32* %var_47, ptr %var_46, ptr @const_44)
    %var_48 = load i32, ptr %var_47
    ret i32 0
}
declare i32 @printf(i8*, ...)
define void @printString(ptr sret(i32) %var_27, ptr %var_28, ptr %var_29) {
  entry: 
    %var_30 = call i32 @printf(i8* %var_29)
    store i32 %var_30, ptr %var_27
    ret void
}
"
`;

exports[`compilation > two prints > stderr 1`] = `[]`;

exports[`compilation > two prints > stdout 1`] = `
[
  "hello world!hello world 2!",
]
`;
