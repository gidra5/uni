// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compilation > function application and literal print > compiled 1`] = `
"@const_56 = constant [4 x i8] c"%i
\\00"
@const_61 = constant i32 2
define i32 @main() {
  main: 
    %var_62 = load i32, ptr @const_61
    %var_63 = call i32 @fn_58(i32 %var_62)
    %var_64 = call i32 @printInt(i32 %var_63)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32 %var_55) {
  entry: 
    %var_57 = call i32 @printf(i8* @const_56, i32 %var_55)
    ret i32 %var_57
}
define i32 @fn_58(i32 %var_59) {
  entry: 
    %var_60 = add i32 %var_59, %var_59
    ret i32 %var_60
}
"
`;

exports[`compilation > function application and literal print > stderr 1`] = `[]`;

exports[`compilation > function application and literal print > stdout 1`] = `
[
  "4
",
]
`;

exports[`compilation > function closure > compiled 1`] = `
"@const_74 = constant [4 x i8] c"%i
\\00"
@const_85 = constant i32 2
@const_94 = constant i32 1
define i32 @main() {
  main: 
    %var_95 = load i32, ptr @const_94
    %var_96 = alloca { { i32 }, i32 ({ i32 }, i32)* }
    call void @fn_76({ { i32 }, i32 ({ i32 }, i32)* }* %var_96, i32 %var_95)
    %var_97 = load { { i32 }, i32 ({ i32 }, i32)* }, ptr %var_96
    %var_98 = extractvalue { { i32 }, i32 ({ i32 }, i32)* } %var_97, 0
    %var_99 = extractvalue { { i32 }, i32 ({ i32 }, i32)* } %var_97, 1
    %var_100 = load i32, ptr @const_85
    %var_101 = call i32 %var_99({ i32 } %var_98, i32 %var_100)
    %var_102 = call i32 @printInt(i32 %var_101)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32 %var_73) {
  entry: 
    %var_75 = call i32 @printf(i8* @const_74, i32 %var_73)
    ret i32 %var_75
}
define void @fn_76(ptr sret({ { i32 }, i32 ({ i32 }, i32)* }) %var_93, i32 %var_77) {
  entry: 
    %var_79 = alloca { i32 }
    %var_80 = load { i32 }, ptr %var_79
    %var_81 = insertvalue { i32 } %var_80, i32 %var_77, 0
    store { i32 } %var_81, ptr %var_79
    %var_89 = alloca { { i32 }, i32 ({ i32 }, i32)* }
    %var_90 = load { { i32 }, i32 ({ i32 }, i32)* }, ptr %var_89
    %var_91 = insertvalue { { i32 }, i32 ({ i32 }, i32)* } %var_90, { i32 } %var_81, 0
    %var_92 = insertvalue { { i32 }, i32 ({ i32 }, i32)* } %var_91, i32 ({ i32 }, i32)* @fn_78, 1
    store { { i32 }, i32 ({ i32 }, i32)* } %var_92, ptr %var_89
    store { { i32 }, i32 ({ i32 }, i32)* } %var_92, ptr %var_93
    ret void
}
define i32 @fn_78({ i32 } %var_82, i32 %var_83) {
  entry: 
    %var_84 = extractvalue { i32 } %var_82, 0
    %var_86 = load i32, ptr @const_85
    %var_87 = mul i32 %var_86, %var_84
    %var_88 = add i32 %var_83, %var_87
    ret i32 %var_88
}
"
`;

exports[`compilation > function closure > stderr 1`] = `[]`;

exports[`compilation > function closure > stdout 1`] = `
[
  "4
",
]
`;

exports[`compilation > function deep closure > compiled 1`] = `
"@const_91 = constant [4 x i8] c"%i
\\00"
@const_123 = constant i32 1
@const_127 = constant i32 3
@const_133 = constant i32 5
define i32 @main() {
  main: 
    %var_124 = load i32, ptr @const_123
    %var_125 = alloca { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* }
    call void @fn_93({ { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* }* %var_125, i32 %var_124)
    %var_126 = load { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* }, ptr %var_125
    %var_128 = extractvalue { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* } %var_126, 0
    %var_129 = extractvalue { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* } %var_126, 1
    %var_130 = load i32, ptr @const_127
    %var_131 = alloca { { i32, i32 }, i32 ({ i32, i32 }, i32)* }
    call void %var_129({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }* %var_131, { i32 } %var_128, i32 %var_130)
    %var_132 = load { { i32, i32 }, i32 ({ i32, i32 }, i32)* }, ptr %var_131
    %var_134 = extractvalue { { i32, i32 }, i32 ({ i32, i32 }, i32)* } %var_132, 0
    %var_135 = extractvalue { { i32, i32 }, i32 ({ i32, i32 }, i32)* } %var_132, 1
    %var_136 = load i32, ptr @const_133
    %var_137 = call i32 %var_135({ i32, i32 } %var_134, i32 %var_136)
    %var_138 = call i32 @printInt(i32 %var_137)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32 %var_90) {
  entry: 
    %var_92 = call i32 @printf(i8* @const_91, i32 %var_90)
    ret i32 %var_92
}
define void @fn_93(ptr sret({ { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* }) %var_122, i32 %var_94) {
  entry: 
    %var_96 = alloca { i32 }
    %var_97 = load { i32 }, ptr %var_96
    %var_98 = insertvalue { i32 } %var_97, i32 %var_94, 0
    store { i32 } %var_98, ptr %var_96
    %var_118 = alloca { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* }
    %var_119 = load { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* }, ptr %var_118
    %var_120 = insertvalue { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* } %var_119, { i32 } %var_98, 0
    %var_121 = insertvalue { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* } %var_120, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* @fn_95, 1
    store { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* } %var_121, ptr %var_118
    store { { i32 }, void ({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }*, { i32 }, i32)* } %var_121, ptr %var_122
    ret void
}
define void @fn_95(ptr sret({ { i32, i32 }, i32 ({ i32, i32 }, i32)* }) %var_117, { i32 } %var_99, i32 %var_100) {
  entry: 
    %var_101 = extractvalue { i32 } %var_99, 0
    %var_103 = alloca { i32, i32 }
    %var_104 = load { i32, i32 }, ptr %var_103
    %var_105 = insertvalue { i32, i32 } %var_104, i32 %var_101, 0
    %var_106 = insertvalue { i32, i32 } %var_105, i32 %var_100, 1
    store { i32, i32 } %var_106, ptr %var_103
    %var_113 = alloca { { i32, i32 }, i32 ({ i32, i32 }, i32)* }
    %var_114 = load { { i32, i32 }, i32 ({ i32, i32 }, i32)* }, ptr %var_113
    %var_115 = insertvalue { { i32, i32 }, i32 ({ i32, i32 }, i32)* } %var_114, { i32, i32 } %var_106, 0
    %var_116 = insertvalue { { i32, i32 }, i32 ({ i32, i32 }, i32)* } %var_115, i32 ({ i32, i32 }, i32)* @fn_102, 1
    store { { i32, i32 }, i32 ({ i32, i32 }, i32)* } %var_116, ptr %var_113
    store { { i32, i32 }, i32 ({ i32, i32 }, i32)* } %var_116, ptr %var_117
    ret void
}
define i32 @fn_102({ i32, i32 } %var_107, i32 %var_108) {
  entry: 
    %var_109 = extractvalue { i32, i32 } %var_107, 0
    %var_110 = extractvalue { i32, i32 } %var_107, 1
    %var_111 = add i32 %var_109, %var_110
    %var_112 = add i32 %var_111, %var_108
    ret i32 %var_112
}
"
`;

exports[`compilation > function deep closure > stderr 1`] = `[]`;

exports[`compilation > function deep closure > stdout 1`] = `
[
  "9
",
]
`;

exports[`compilation > hello world > compiled 1`] = `
"@const_12 = constant [4 x i8] c"%i
\\00"
@const_14 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    %var_15 = call i32 @printf(i8* @const_14)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32 %var_11) {
  entry: 
    %var_13 = call i32 @printf(i8* @const_12, i32 %var_11)
    ret i32 %var_13
}
"
`;

exports[`compilation > hello world > stderr 1`] = `[]`;

exports[`compilation > hello world > stdout 1`] = `
[
  "hello world!",
]
`;

exports[`compilation > hello world string > compiled 1`] = `
"@const_6 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    ret i32 0
}
"
`;

exports[`compilation > hello world string > stderr 1`] = `[]`;

exports[`compilation > hello world string > stdout 1`] = `[]`;

exports[`compilation > hello world twice > compiled 1`] = `
"@const_26 = constant [4 x i8] c"%i
\\00"
@const_28 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    %var_29 = call i32 @printf(i8* @const_28)
    %var_30 = call i32 @printf(i8* @const_28)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32 %var_25) {
  entry: 
    %var_27 = call i32 @printf(i8* @const_26, i32 %var_25)
    ret i32 %var_27
}
"
`;

exports[`compilation > hello world twice > stderr 1`] = `[]`;

exports[`compilation > hello world twice > stdout 1`] = `
[
  "hello world!hello world!",
]
`;

exports[`compilation > print number > compiled 1`] = `
"@const_10 = constant [4 x i8] c"%i
\\00"
@const_12 = constant i32 1
define i32 @main() {
  main: 
    %var_13 = load i32, ptr @const_12
    %var_14 = call i32 @printInt(i32 %var_13)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32 %var_9) {
  entry: 
    %var_11 = call i32 @printf(i8* @const_10, i32 %var_9)
    ret i32 %var_11
}
"
`;

exports[`compilation > print number > stderr 1`] = `[]`;

exports[`compilation > print number > stdout 1`] = `
[
  "1
",
]
`;

exports[`compilation > two prints > compiled 1`] = `
"@const_26 = constant [4 x i8] c"%i
\\00"
@const_28 = constant [13 x i8] c"hello world!\\00"
@const_30 = constant [15 x i8] c"hello world 2!\\00"
define i32 @main() {
  main: 
    %var_29 = call i32 @printf(i8* @const_28)
    %var_31 = call i32 @printf(i8* @const_30)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32 %var_25) {
  entry: 
    %var_27 = call i32 @printf(i8* @const_26, i32 %var_25)
    ret i32 %var_27
}
"
`;

exports[`compilation > two prints > stderr 1`] = `[]`;

exports[`compilation > two prints > stdout 1`] = `
[
  "hello world!hello world 2!",
]
`;
