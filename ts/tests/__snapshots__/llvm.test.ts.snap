// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compilation > function application and literal print > compiled 1`] = `
"@const_55 = constant [4 x i8] c"%i
\\00"
@const_59 = constant i32 2
define i32 @main() {
  main: 
    %var_60 = load i32, i32* @const_59
    %var_61 = call i32 @fn_57(i32 %var_60)
    %var_62 = call i32 @printInt(i32 %var_61)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32) {
  entry: 
    %var_56 = call i32 @printf(i8* @const_55, i32 %0)
    ret i32 %var_56
}
define i32 @fn_57(i32) {
  entry: 
    %var_58 = add i32 %0, %0
    ret i32 %var_58
}
"
`;

exports[`compilation > function application and literal print > stderr 1`] = `[]`;

exports[`compilation > function application and literal print > stdout 1`] = `
[
  "4
",
]
`;

exports[`compilation > function closure  > compiled 1`] = `
"@const_74 = constant [4 x i8] c"%i
\\00"
@const_85 = constant i32 2
@const_94 = constant i32 1
define i32 @main() {
  main: 
    %var_95 = load i32, ptr @const_94
    %var_96 = alloca { { i32 }, i32 ({ i32 }, i32)* }
    call void @fn_76({ { i32 }, i32 ({ i32 }, i32)* }* %var_96, i32 %var_95)
    %var_97 = load { { i32 }, i32 ({ i32 }, i32)* }, ptr %var_96
    %var_98 = extractvalue { { i32 }, i32 ({ i32 }, i32)* } %var_97, 0
    %var_99 = extractvalue { { i32 }, i32 ({ i32 }, i32)* } %var_97, 1
    %var_100 = load i32, ptr @const_85
    %var_101 = call i32 %var_99({ i32 } %var_98, i32 %var_100)
    %var_102 = call i32 @printInt(i32 %var_101)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32 %var_73) {
  entry: 
    %var_75 = call i32 @printf(i8* @const_74, i32 %var_73)
    ret i32 %var_75
}
define void @fn_76(ptr sret({ { i32 }, i32 ({ i32 }, i32)* }) %var_93, i32 %var_77) {
  entry: 
    %var_79 = alloca { i32 }
    %var_80 = load { i32 }, ptr %var_79
    %var_81 = insertvalue { i32 } %var_80, i32 %var_77, 0
    store { i32 } %var_81, ptr %var_79
    %var_89 = alloca { { i32 }, i32 ({ i32 }, i32)* }
    %var_90 = load { { i32 }, i32 ({ i32 }, i32)* }, ptr %var_89
    %var_91 = insertvalue { { i32 }, i32 ({ i32 }, i32)* } %var_90, { i32 } %var_81, 0
    %var_92 = insertvalue { { i32 }, i32 ({ i32 }, i32)* } %var_91, i32 ({ i32 }, i32)* @fn_78, 1
    store { { i32 }, i32 ({ i32 }, i32)* } %var_92, ptr %var_89
    store { { i32 }, i32 ({ i32 }, i32)* } %var_92, ptr %var_93
    ret void
}
define i32 @fn_78({ i32 } %var_82, i32 %var_83) {
  entry: 
    %var_84 = extractvalue { i32 } %var_82, 0
    %var_86 = load i32, ptr @const_85
    %var_87 = mul i32 %var_86, %var_84
    %var_88 = add i32 %var_83, %var_87
    ret i32 %var_88
}
"
`;

exports[`compilation > function closure  > stderr 1`] = `[]`;

exports[`compilation > function closure  > stdout 1`] = `
[
  "4
",
]
`;

exports[`compilation > hello world > compiled 1`] = `
"@const_11 = constant [4 x i8] c"%i
\\00"
@const_13 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    %var_14 = call i32 @printf(i8* @const_13)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32) {
  entry: 
    %var_12 = call i32 @printf(i8* @const_11, i32 %0)
    ret i32 %var_12
}
"
`;

exports[`compilation > hello world > stderr 1`] = `[]`;

exports[`compilation > hello world > stdout 1`] = `
[
  "hello world!",
]
`;

exports[`compilation > hello world string > compiled 1`] = `
"@const_6 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    ret i32 0
}
"
`;

exports[`compilation > hello world string > stderr 1`] = `[]`;

exports[`compilation > hello world string > stdout 1`] = `[]`;

exports[`compilation > hello world twice > compiled 1`] = `
"@const_25 = constant [4 x i8] c"%i
\\00"
@const_27 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    %var_28 = call i32 @printf(i8* @const_27)
    %var_29 = call i32 @printf(i8* @const_27)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32) {
  entry: 
    %var_26 = call i32 @printf(i8* @const_25, i32 %0)
    ret i32 %var_26
}
"
`;

exports[`compilation > hello world twice > stderr 1`] = `[]`;

exports[`compilation > hello world twice > stdout 1`] = `
[
  "hello world!hello world!",
]
`;

exports[`compilation > two prints > compiled 1`] = `
"@const_25 = constant [4 x i8] c"%i
\\00"
@const_27 = constant [13 x i8] c"hello world!\\00"
@const_29 = constant [15 x i8] c"hello world 2!\\00"
define i32 @main() {
  main: 
    %var_28 = call i32 @printf(i8* @const_27)
    %var_30 = call i32 @printf(i8* @const_29)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define i32 @printInt(i32) {
  entry: 
    %var_26 = call i32 @printf(i8* @const_25, i32 %0)
    ret i32 %var_26
}
"
`;

exports[`compilation > two prints > stderr 1`] = `[]`;

exports[`compilation > two prints > stdout 1`] = `
[
  "hello world!hello world 2!",
]
`;
