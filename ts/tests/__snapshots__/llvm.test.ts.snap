// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compilation 2 > function application and literal print > compiled 1`] = `
"@const_13 = constant [4 x i8] c"%i
\\00"
@const_32 = constant i32 2
define i32 @main() {
  main: 
    %var_15 = alloca {  }
    %var_16 = load {  }, ptr %var_15
    store {  } %var_16, ptr %var_15
    %var_17 = alloca { void (i32*, { }, i32)*, {  } }
    %var_18 = load { void (i32*, { }, i32)*, {  } }, ptr %var_17
    %var_19 = insertvalue { void (i32*, { }, i32)*, {  } } %var_18, void (i32*, { }, i32)* @printInt, 0
    %var_20 = insertvalue { void (i32*, { }, i32)*, {  } } %var_19, {  } %var_16, 1
    store { void (i32*, { }, i32)*, {  } } %var_20, ptr %var_17
    %var_22 = alloca {  }
    %var_23 = load {  }, ptr %var_22
    store {  } %var_23, ptr %var_22
    %var_28 = alloca { void (i32*, {  }, i32)*, {  } }
    %var_29 = load { void (i32*, {  }, i32)*, {  } }, ptr %var_28
    %var_30 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_29, void (i32*, {  }, i32)* @fn_21, 0
    %var_31 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_30, {  } %var_23, 1
    store { void (i32*, {  }, i32)*, {  } } %var_31, ptr %var_28
    %var_33 = load i32, ptr @const_32
    %var_34 = extractvalue { void (i32*, {  }, i32)*, {  } } %var_31, 0
    %var_35 = extractvalue { void (i32*, {  }, i32)*, {  } } %var_31, 1
    %var_36 = alloca i32
    call void %var_34(i32* %var_36, {  } %var_35, i32 %var_33)
    %var_37 = load i32, ptr %var_36
    %var_38 = extractvalue { void (i32*, { }, i32)*, {  } } %var_20, 0
    %var_39 = extractvalue { void (i32*, { }, i32)*, {  } } %var_20, 1
    %var_40 = alloca i32
    call void %var_38(i32* %var_40, { } %var_39, i32 %var_37)
    %var_41 = load i32, ptr %var_40
    ret i32 0
}
declare i32 @printf(i8*, ...)
define void @printInt(ptr sret(i32) %var_10, { } %var_11, i32 %var_12) {
  entry: 
    %var_14 = call i32 @printf(i8* @const_13, i32 %var_12)
    store i32 %var_14, ptr %var_10
    ret void
}
define void @fn_21(ptr sret(i32) %var_24, {  } %var_25, i32 %var_26) {
  entry: 
    %var_27 = add i32 %var_26, %var_26
    store i32 %var_27, ptr %var_24
    ret void
}
"
`;

exports[`compilation 2 > function application and literal print > stderr 1`] = `[]`;

exports[`compilation 2 > function application and literal print > stdout 1`] = `
[
  "4
",
]
`;

exports[`compilation 2 > function deep closure > compiled 1`] = `
"@const_23 = constant [4 x i8] c"%i
\\00"
@const_69 = constant i32 1
@const_75 = constant i32 3
@const_81 = constant i32 5
define i32 @main() {
  main: 
    %var_25 = alloca {  }
    %var_26 = load {  }, ptr %var_25
    store {  } %var_26, ptr %var_25
    %var_27 = alloca { void (i32*, { }, i32)*, {  } }
    %var_28 = load { void (i32*, { }, i32)*, {  } }, ptr %var_27
    %var_29 = insertvalue { void (i32*, { }, i32)*, {  } } %var_28, void (i32*, { }, i32)* @printInt, 0
    %var_30 = insertvalue { void (i32*, { }, i32)*, {  } } %var_29, {  } %var_26, 1
    store { void (i32*, { }, i32)*, {  } } %var_30, ptr %var_27
    %var_32 = alloca {  }
    %var_33 = load {  }, ptr %var_32
    store {  } %var_33, ptr %var_32
    %var_65 = alloca { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } }
    %var_66 = load { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } }, ptr %var_65
    %var_67 = insertvalue { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_66, void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)* @fn_31, 0
    %var_68 = insertvalue { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_67, {  } %var_33, 1
    store { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_68, ptr %var_65
    %var_70 = load i32, ptr @const_69
    %var_71 = extractvalue { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_68, 0
    %var_72 = extractvalue { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_68, 1
    %var_73 = alloca { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }
    call void %var_71({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }* %var_73, {  } %var_72, i32 %var_70)
    %var_74 = load { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }, ptr %var_73
    %var_76 = load i32, ptr @const_75
    %var_77 = extractvalue { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_74, 0
    %var_78 = extractvalue { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_74, 1
    %var_79 = alloca { void (i32*, { i32, i32 }, i32)*, { i32, i32 } }
    call void %var_77({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }* %var_79, { i32 } %var_78, i32 %var_76)
    %var_80 = load { void (i32*, { i32, i32 }, i32)*, { i32, i32 } }, ptr %var_79
    %var_82 = load i32, ptr @const_81
    %var_83 = extractvalue { void (i32*, { i32, i32 }, i32)*, { i32, i32 } } %var_80, 0
    %var_84 = extractvalue { void (i32*, { i32, i32 }, i32)*, { i32, i32 } } %var_80, 1
    %var_85 = alloca i32
    call void %var_83(i32* %var_85, { i32, i32 } %var_84, i32 %var_82)
    %var_86 = load i32, ptr %var_85
    %var_87 = extractvalue { void (i32*, { }, i32)*, {  } } %var_30, 0
    %var_88 = extractvalue { void (i32*, { }, i32)*, {  } } %var_30, 1
    %var_89 = alloca i32
    call void %var_87(i32* %var_89, { } %var_88, i32 %var_86)
    %var_90 = load i32, ptr %var_89
    ret i32 0
}
declare i32 @printf(i8*, ...)
define void @printInt(ptr sret(i32) %var_20, { } %var_21, i32 %var_22) {
  entry: 
    %var_24 = call i32 @printf(i8* @const_23, i32 %var_22)
    store i32 %var_24, ptr %var_20
    ret void
}
define void @fn_31(ptr sret({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }) %var_34, {  } %var_35, i32 %var_36) {
  entry: 
    %var_38 = alloca { i32 }
    %var_39 = load { i32 }, ptr %var_38
    %var_40 = insertvalue { i32 } %var_39, i32 %var_36, 0
    store { i32 } %var_40, ptr %var_38
    %var_61 = alloca { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }
    %var_62 = load { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }, ptr %var_61
    %var_63 = insertvalue { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_62, void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)* @fn_37, 0
    %var_64 = insertvalue { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_63, { i32 } %var_40, 1
    store { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_64, ptr %var_61
    store { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_64, ptr %var_34
    ret void
}
define void @fn_37(ptr sret({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }) %var_41, { i32 } %var_42, i32 %var_43) {
  entry: 
    %var_44 = extractvalue { i32 } %var_42, 0
    %var_46 = alloca { i32, i32 }
    %var_47 = load { i32, i32 }, ptr %var_46
    %var_48 = insertvalue { i32, i32 } %var_47, i32 %var_44, 0
    %var_49 = insertvalue { i32, i32 } %var_48, i32 %var_43, 1
    store { i32, i32 } %var_49, ptr %var_46
    %var_57 = alloca { void (i32*, { i32, i32 }, i32)*, { i32, i32 } }
    %var_58 = load { void (i32*, { i32, i32 }, i32)*, { i32, i32 } }, ptr %var_57
    %var_59 = insertvalue { void (i32*, { i32, i32 }, i32)*, { i32, i32 } } %var_58, void (i32*, { i32, i32 }, i32)* @fn_45, 0
    %var_60 = insertvalue { void (i32*, { i32, i32 }, i32)*, { i32, i32 } } %var_59, { i32, i32 } %var_49, 1
    store { void (i32*, { i32, i32 }, i32)*, { i32, i32 } } %var_60, ptr %var_57
    store { void (i32*, { i32, i32 }, i32)*, { i32, i32 } } %var_60, ptr %var_41
    ret void
}
define void @fn_45(ptr sret(i32) %var_50, { i32, i32 } %var_51, i32 %var_52) {
  entry: 
    %var_53 = extractvalue { i32, i32 } %var_51, 0
    %var_54 = extractvalue { i32, i32 } %var_51, 1
    %var_55 = add i32 %var_54, %var_52
    %var_56 = add i32 %var_53, %var_55
    store i32 %var_56, ptr %var_50
    ret void
}
"
`;

exports[`compilation 2 > function deep closure > stderr 1`] = `[]`;

exports[`compilation 2 > function deep closure > stdout 1`] = `
[
  "9
",
]
`;

exports[`compilation 2 > function multiple args > compiled 1`] = `
"@const_17 = constant [4 x i8] c"%i
\\00"
@const_32 = constant i32 2
@const_40 = constant i32 1
define i32 @main() {
  main: 
    %var_19 = alloca {  }
    %var_20 = load {  }, ptr %var_19
    store {  } %var_20, ptr %var_19
    %var_21 = alloca { void (i32*, { }, i32)*, {  } }
    %var_22 = load { void (i32*, { }, i32)*, {  } }, ptr %var_21
    %var_23 = insertvalue { void (i32*, { }, i32)*, {  } } %var_22, void (i32*, { }, i32)* @printInt, 0
    %var_24 = insertvalue { void (i32*, { }, i32)*, {  } } %var_23, {  } %var_20, 1
    store { void (i32*, { }, i32)*, {  } } %var_24, ptr %var_21
    %var_26 = alloca {  }
    %var_27 = load {  }, ptr %var_26
    store {  } %var_27, ptr %var_26
    %var_36 = alloca { void (i32*, {  }, i32, i32)*, {  } }
    %var_37 = load { void (i32*, {  }, i32, i32)*, {  } }, ptr %var_36
    %var_38 = insertvalue { void (i32*, {  }, i32, i32)*, {  } } %var_37, void (i32*, {  }, i32, i32)* @fn_25, 0
    %var_39 = insertvalue { void (i32*, {  }, i32, i32)*, {  } } %var_38, {  } %var_27, 1
    store { void (i32*, {  }, i32, i32)*, {  } } %var_39, ptr %var_36
    %var_41 = load i32, ptr @const_40
    %var_42 = load i32, ptr @const_32
    %var_43 = extractvalue { void (i32*, {  }, i32, i32)*, {  } } %var_39, 0
    %var_44 = extractvalue { void (i32*, {  }, i32, i32)*, {  } } %var_39, 1
    %var_45 = alloca i32
    call void %var_43(i32* %var_45, {  } %var_44, i32 %var_41, i32 %var_42)
    %var_46 = load i32, ptr %var_45
    %var_47 = extractvalue { void (i32*, { }, i32)*, {  } } %var_24, 0
    %var_48 = extractvalue { void (i32*, { }, i32)*, {  } } %var_24, 1
    %var_49 = alloca i32
    call void %var_47(i32* %var_49, { } %var_48, i32 %var_46)
    %var_50 = load i32, ptr %var_49
    ret i32 0
}
declare i32 @printf(i8*, ...)
define void @printInt(ptr sret(i32) %var_14, { } %var_15, i32 %var_16) {
  entry: 
    %var_18 = call i32 @printf(i8* @const_17, i32 %var_16)
    store i32 %var_18, ptr %var_14
    ret void
}
define void @fn_25(ptr sret(i32) %var_28, {  } %var_29, i32 %var_30, i32 %var_31) {
  entry: 
    %var_33 = load i32, ptr @const_32
    %var_34 = mul i32 %var_33, %var_30
    %var_35 = add i32 %var_31, %var_34
    store i32 %var_35, ptr %var_28
    ret void
}
"
`;

exports[`compilation 2 > function multiple args > stderr 1`] = `[]`;

exports[`compilation 2 > function multiple args > stdout 1`] = `
[
  "4
",
]
`;

exports[`compilation 2 > hello world string > compiled 1`] = `
"@const_2 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    ret i32 0
}
"
`;

exports[`compilation 2 > hello world twice > compiled 1`] = `
"@const_17 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    %var_11 = alloca {  }
    %var_12 = load {  }, ptr %var_11
    store {  } %var_12, ptr %var_11
    %var_13 = alloca { void (i32*, { }, ptr)*, {  } }
    %var_14 = load { void (i32*, { }, ptr)*, {  } }, ptr %var_13
    %var_15 = insertvalue { void (i32*, { }, ptr)*, {  } } %var_14, void (i32*, { }, ptr)* @printString, 0
    %var_16 = insertvalue { void (i32*, { }, ptr)*, {  } } %var_15, {  } %var_12, 1
    store { void (i32*, { }, ptr)*, {  } } %var_16, ptr %var_13
    %var_18 = extractvalue { void (i32*, { }, ptr)*, {  } } %var_16, 0
    %var_19 = extractvalue { void (i32*, { }, ptr)*, {  } } %var_16, 1
    %var_20 = alloca i32
    call void %var_18(i32* %var_20, { } %var_19, ptr @const_17)
    %var_21 = load i32, ptr %var_20
    %var_22 = alloca {  }
    %var_23 = load {  }, ptr %var_22
    store {  } %var_23, ptr %var_22
    %var_24 = alloca { void (i32*, { }, ptr)*, {  } }
    %var_25 = load { void (i32*, { }, ptr)*, {  } }, ptr %var_24
    %var_26 = insertvalue { void (i32*, { }, ptr)*, {  } } %var_25, void (i32*, { }, ptr)* @printString, 0
    %var_27 = insertvalue { void (i32*, { }, ptr)*, {  } } %var_26, {  } %var_23, 1
    store { void (i32*, { }, ptr)*, {  } } %var_27, ptr %var_24
    %var_28 = extractvalue { void (i32*, { }, ptr)*, {  } } %var_27, 0
    %var_29 = extractvalue { void (i32*, { }, ptr)*, {  } } %var_27, 1
    %var_30 = alloca i32
    call void %var_28(i32* %var_30, { } %var_29, ptr @const_17)
    %var_31 = load i32, ptr %var_30
    ret i32 0
}
declare i32 @printf(i8*, ...)
define void @printString(ptr sret(i32) %var_7, { } %var_8, ptr %var_9) {
  entry: 
    %var_10 = call i32 @printf(i8* %var_9)
    store i32 %var_10, ptr %var_7
    ret void
}
"
`;

exports[`data structures compilation > unit > compiled 1`] = `
"@const_15 = constant ptr inttoptr (i64 0 to ptr)
@const_20 = constant [5 x i8] c"unit\\00"
@symbols_metadata = constant [1 x { i8* }] [{ i8* } { i8* @const_20 }]
define i32 @main() {
  main: 
    %var_9 = alloca {  }
    %var_10 = load {  }, ptr %var_9
    store {  } %var_10, ptr %var_9
    %var_11 = alloca { void (ptr, { }, ptr)*, {  } }
    %var_12 = load { void (ptr, { }, ptr)*, {  } }, ptr %var_11
    %var_13 = insertvalue { void (ptr, { }, ptr)*, {  } } %var_12, void (ptr, { }, ptr)* @print_symbol_wrap, 0
    %var_14 = insertvalue { void (ptr, { }, ptr)*, {  } } %var_13, {  } %var_10, 1
    store { void (ptr, { }, ptr)*, {  } } %var_14, ptr %var_11
    %var_16 = extractvalue { void (ptr, { }, ptr)*, {  } } %var_14, 0
    %var_17 = extractvalue { void (ptr, { }, ptr)*, {  } } %var_14, 1
    %var_18 = alloca ptr
    call void %var_16(ptr %var_18, { } %var_17, ptr @const_15)
    %var_19 = load ptr, ptr %var_18
    ret i32 0
}
declare ptr @print_symbol(ptr)
define void @print_symbol_wrap(ptr sret(ptr) %var_4, { } %var_5, ptr %var_6) {
  entry7: 
    %var_8 = call ptr @print_symbol(ptr %var_6)
    store ptr %var_8, ptr %var_4
    ret void
}
"
`;

exports[`data structures compilation > unit > stderr 1`] = `
[
  "Symbol(unit)
",
]
`;

exports[`data structures compilation > unit > stdout 1`] = `[]`;

exports[`simply typed lambda calc compilation > apply > compiled 1`] = `
"@const_66 = constant i32 2
define i32 @main() {
  main: 
    %var_20 = alloca {  }
    %var_21 = load {  }, ptr %var_20
    store {  } %var_21, ptr %var_20
    %var_22 = alloca { void (i32*, { }, i32)*, {  } }
    %var_23 = load { void (i32*, { }, i32)*, {  } }, ptr %var_22
    %var_24 = insertvalue { void (i32*, { }, i32)*, {  } } %var_23, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_25 = insertvalue { void (i32*, { }, i32)*, {  } } %var_24, {  } %var_21, 1
    store { void (i32*, { }, i32)*, {  } } %var_25, ptr %var_22
    %var_27 = alloca {  }
    %var_28 = load {  }, ptr %var_27
    store {  } %var_28, ptr %var_27
    %var_48 = alloca { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }*, {  }, { void (i32*, {  }, i32)*, {  } })*, {  } }
    %var_49 = load { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }*, {  }, { void (i32*, {  }, i32)*, {  } })*, {  } }, ptr %var_48
    %var_50 = insertvalue { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }*, {  }, { void (i32*, {  }, i32)*, {  } })*, {  } } %var_49, void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }*, {  }, { void (i32*, {  }, i32)*, {  } })* @fn_26, 0
    %var_51 = insertvalue { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }*, {  }, { void (i32*, {  }, i32)*, {  } })*, {  } } %var_50, {  } %var_28, 1
    store { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }*, {  }, { void (i32*, {  }, i32)*, {  } })*, {  } } %var_51, ptr %var_48
    %var_53 = alloca {  }
    %var_54 = load {  }, ptr %var_53
    store {  } %var_54, ptr %var_53
    %var_58 = alloca { void (i32*, {  }, i32)*, {  } }
    %var_59 = load { void (i32*, {  }, i32)*, {  } }, ptr %var_58
    %var_60 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_59, void (i32*, {  }, i32)* @fn_52, 0
    %var_61 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_60, {  } %var_54, 1
    store { void (i32*, {  }, i32)*, {  } } %var_61, ptr %var_58
    %var_62 = extractvalue { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }*, {  }, { void (i32*, {  }, i32)*, {  } })*, {  } } %var_51, 0
    %var_63 = extractvalue { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }*, {  }, { void (i32*, {  }, i32)*, {  } })*, {  } } %var_51, 1
    %var_64 = alloca { void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }
    call void %var_62({ void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }* %var_64, {  } %var_63, { void (i32*, {  }, i32)*, {  } } %var_61)
    %var_65 = load { void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }, ptr %var_64
    %var_67 = load i32, ptr @const_66
    %var_68 = extractvalue { void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } } %var_65, 0
    %var_69 = extractvalue { void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } } %var_65, 1
    %var_70 = alloca i32
    call void %var_68(i32* %var_70, { { void (i32*, {  }, i32)*, {  } } } %var_69, i32 %var_67)
    %var_71 = load i32, ptr %var_70
    %var_72 = extractvalue { void (i32*, { }, i32)*, {  } } %var_25, 0
    %var_73 = extractvalue { void (i32*, { }, i32)*, {  } } %var_25, 1
    %var_74 = alloca i32
    call void %var_72(i32* %var_74, { } %var_73, i32 %var_71)
    %var_75 = load i32, ptr %var_74
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_16, { } %var_17, i32 %var_18) {
  entry: 
    %var_19 = call i32 @print_int(i32 %var_18)
    store i32 %var_19, ptr %var_16
    ret void
}
define void @fn_26(ptr sret({ void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }) %var_29, {  } %var_30, { void (i32*, {  }, i32)*, {  } } %var_31) {
  entry: 
    %var_33 = alloca { { void (i32*, {  }, i32)*, {  } } }
    %var_34 = load { { void (i32*, {  }, i32)*, {  } } }, ptr %var_33
    %var_35 = insertvalue { { void (i32*, {  }, i32)*, {  } } } %var_34, { void (i32*, {  }, i32)*, {  } } %var_31, 0
    store { { void (i32*, {  }, i32)*, {  } } } %var_35, ptr %var_33
    %var_44 = alloca { void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }
    %var_45 = load { void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } }, ptr %var_44
    %var_46 = insertvalue { void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } } %var_45, void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)* @fn_32, 0
    %var_47 = insertvalue { void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } } %var_46, { { void (i32*, {  }, i32)*, {  } } } %var_35, 1
    store { void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } } %var_47, ptr %var_44
    store { void (i32*, { { void (i32*, {  }, i32)*, {  } } }, i32)*, { { void (i32*, {  }, i32)*, {  } } } } %var_47, ptr %var_29
    ret void
}
define void @fn_32(ptr sret(i32) %var_36, { { void (i32*, {  }, i32)*, {  } } } %var_37, i32 %var_38) {
  entry: 
    %var_39 = extractvalue { { void (i32*, {  }, i32)*, {  } } } %var_37, 0
    %var_40 = extractvalue { void (i32*, {  }, i32)*, {  } } %var_39, 0
    %var_41 = extractvalue { void (i32*, {  }, i32)*, {  } } %var_39, 1
    %var_42 = alloca i32
    call void %var_40(i32* %var_42, {  } %var_41, i32 %var_38)
    %var_43 = load i32, ptr %var_42
    store i32 %var_43, ptr %var_36
    ret void
}
define void @fn_52(ptr sret(i32) %var_55, {  } %var_56, i32 %var_57) {
  entry: 
    store i32 %var_57, ptr %var_55
    ret void
}
"
`;

exports[`simply typed lambda calc compilation > apply > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > apply > stdout 1`] = `
[
  "2
",
]
`;

exports[`simply typed lambda calc compilation > church tuple > compiled 1`] = `
"@const_78 = constant i32 1
@const_84 = constant i32 2
define i32 @main() {
  main: 
    %var_28 = alloca {  }
    %var_29 = load {  }, ptr %var_28
    store {  } %var_29, ptr %var_28
    %var_30 = alloca { void (i32*, { }, i32)*, {  } }
    %var_31 = load { void (i32*, { }, i32)*, {  } }, ptr %var_30
    %var_32 = insertvalue { void (i32*, { }, i32)*, {  } } %var_31, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_33 = insertvalue { void (i32*, { }, i32)*, {  } } %var_32, {  } %var_29, 1
    store { void (i32*, { }, i32)*, {  } } %var_33, ptr %var_30
    %var_35 = alloca {  }
    %var_36 = load {  }, ptr %var_35
    store {  } %var_36, ptr %var_35
    %var_74 = alloca { void ({ void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } }
    %var_75 = load { void ({ void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } }, ptr %var_74
    %var_76 = insertvalue { void ({ void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_75, void ({ void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)* @fn_34, 0
    %var_77 = insertvalue { void ({ void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_76, {  } %var_36, 1
    store { void ({ void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_77, ptr %var_74
    %var_79 = load i32, ptr @const_78
    %var_80 = extractvalue { void ({ void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_77, 0
    %var_81 = extractvalue { void ({ void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_77, 1
    %var_82 = alloca { void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }
    call void %var_80({ void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }* %var_82, {  } %var_81, i32 %var_79)
    %var_83 = load { void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }, ptr %var_82
    %var_85 = load i32, ptr @const_84
    %var_86 = extractvalue { void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_83, 0
    %var_87 = extractvalue { void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_83, 1
    %var_88 = alloca { void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }
    call void %var_86({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }* %var_88, { i32 } %var_87, i32 %var_85)
    %var_89 = load { void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }, ptr %var_88
    %var_91 = alloca {  }
    %var_92 = load {  }, ptr %var_91
    store {  } %var_92, ptr %var_91
    %var_108 = alloca { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } }
    %var_109 = load { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } }, ptr %var_108
    %var_110 = insertvalue { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_109, void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)* @fn_90, 0
    %var_111 = insertvalue { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_110, {  } %var_92, 1
    store { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_111, ptr %var_108
    %var_112 = extractvalue { void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } } %var_89, 0
    %var_113 = extractvalue { void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } } %var_89, 1
    %var_114 = alloca i32
    call void %var_112(i32* %var_114, { i32, i32 } %var_113, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_111)
    %var_115 = load i32, ptr %var_114
    %var_116 = extractvalue { void (i32*, { }, i32)*, {  } } %var_33, 0
    %var_117 = extractvalue { void (i32*, { }, i32)*, {  } } %var_33, 1
    %var_118 = alloca i32
    call void %var_116(i32* %var_118, { } %var_117, i32 %var_115)
    %var_119 = load i32, ptr %var_118
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_24, { } %var_25, i32 %var_26) {
  entry: 
    %var_27 = call i32 @print_int(i32 %var_26)
    store i32 %var_27, ptr %var_24
    ret void
}
define void @fn_34(ptr sret({ void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }) %var_37, {  } %var_38, i32 %var_39) {
  entry: 
    %var_41 = alloca { i32 }
    %var_42 = load { i32 }, ptr %var_41
    %var_43 = insertvalue { i32 } %var_42, i32 %var_39, 0
    store { i32 } %var_43, ptr %var_41
    %var_70 = alloca { void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }
    %var_71 = load { void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }, ptr %var_70
    %var_72 = insertvalue { void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_71, void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)* @fn_40, 0
    %var_73 = insertvalue { void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_72, { i32 } %var_43, 1
    store { void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_73, ptr %var_70
    store { void ({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_73, ptr %var_37
    ret void
}
define void @fn_40(ptr sret({ void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }) %var_44, { i32 } %var_45, i32 %var_46) {
  entry: 
    %var_47 = extractvalue { i32 } %var_45, 0
    %var_49 = alloca { i32, i32 }
    %var_50 = load { i32, i32 }, ptr %var_49
    %var_51 = insertvalue { i32, i32 } %var_50, i32 %var_47, 0
    %var_52 = insertvalue { i32, i32 } %var_51, i32 %var_46, 1
    store { i32, i32 } %var_52, ptr %var_49
    %var_66 = alloca { void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }
    %var_67 = load { void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } }, ptr %var_66
    %var_68 = insertvalue { void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } } %var_67, void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })* @fn_48, 0
    %var_69 = insertvalue { void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } } %var_68, { i32, i32 } %var_52, 1
    store { void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } } %var_69, ptr %var_66
    store { void (i32*, { i32, i32 }, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } })*, { i32, i32 } } %var_69, ptr %var_44
    ret void
}
define void @fn_48(ptr sret(i32) %var_53, { i32, i32 } %var_54, { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_55) {
  entry: 
    %var_56 = extractvalue { i32, i32 } %var_54, 0
    %var_57 = extractvalue { i32, i32 } %var_54, 1
    %var_58 = extractvalue { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_55, 0
    %var_59 = extractvalue { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_55, 1
    %var_60 = alloca { void (i32*, { i32 }, i32)*, { i32 } }
    call void %var_58({ void (i32*, { i32 }, i32)*, { i32 } }* %var_60, {  } %var_59, i32 %var_56)
    %var_61 = load { void (i32*, { i32 }, i32)*, { i32 } }, ptr %var_60
    %var_62 = extractvalue { void (i32*, { i32 }, i32)*, { i32 } } %var_61, 0
    %var_63 = extractvalue { void (i32*, { i32 }, i32)*, { i32 } } %var_61, 1
    %var_64 = alloca i32
    call void %var_62(i32* %var_64, { i32 } %var_63, i32 %var_57)
    %var_65 = load i32, ptr %var_64
    store i32 %var_65, ptr %var_53
    ret void
}
define void @fn_90(ptr sret({ void (i32*, { i32 }, i32)*, { i32 } }) %var_93, {  } %var_94, i32 %var_95) {
  entry: 
    %var_97 = alloca { i32 }
    %var_98 = load { i32 }, ptr %var_97
    %var_99 = insertvalue { i32 } %var_98, i32 %var_95, 0
    store { i32 } %var_99, ptr %var_97
    %var_104 = alloca { void (i32*, { i32 }, i32)*, { i32 } }
    %var_105 = load { void (i32*, { i32 }, i32)*, { i32 } }, ptr %var_104
    %var_106 = insertvalue { void (i32*, { i32 }, i32)*, { i32 } } %var_105, void (i32*, { i32 }, i32)* @fn_96, 0
    %var_107 = insertvalue { void (i32*, { i32 }, i32)*, { i32 } } %var_106, { i32 } %var_99, 1
    store { void (i32*, { i32 }, i32)*, { i32 } } %var_107, ptr %var_104
    store { void (i32*, { i32 }, i32)*, { i32 } } %var_107, ptr %var_93
    ret void
}
define void @fn_96(ptr sret(i32) %var_100, { i32 } %var_101, i32 %var_102) {
  entry: 
    %var_103 = extractvalue { i32 } %var_101, 0
    store i32 %var_103, ptr %var_100
    ret void
}
"
`;

exports[`simply typed lambda calc compilation > church tuple > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > church tuple > stdout 1`] = `
[
  "1
",
]
`;

exports[`simply typed lambda calc compilation > church tuple 2 > compiled 1`] = `
"@const_43 = constant i32 1
@const_45 = constant i32 2
define i32 @main() {
  main: 
    %var_21 = alloca {  }
    %var_22 = load {  }, ptr %var_21
    store {  } %var_22, ptr %var_21
    %var_23 = alloca { void (i32*, { }, i32)*, {  } }
    %var_24 = load { void (i32*, { }, i32)*, {  } }, ptr %var_23
    %var_25 = insertvalue { void (i32*, { }, i32)*, {  } } %var_24, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_26 = insertvalue { void (i32*, { }, i32)*, {  } } %var_25, {  } %var_22, 1
    store { void (i32*, { }, i32)*, {  } } %var_26, ptr %var_23
    %var_28 = alloca {  }
    %var_29 = load {  }, ptr %var_28
    store {  } %var_29, ptr %var_28
    %var_39 = alloca { void (i32*, {  }, i32, i32, { void (i32*, {  }, i32, i32)*, {  } })*, {  } }
    %var_40 = load { void (i32*, {  }, i32, i32, { void (i32*, {  }, i32, i32)*, {  } })*, {  } }, ptr %var_39
    %var_41 = insertvalue { void (i32*, {  }, i32, i32, { void (i32*, {  }, i32, i32)*, {  } })*, {  } } %var_40, void (i32*, {  }, i32, i32, { void (i32*, {  }, i32, i32)*, {  } })* @fn_27, 0
    %var_42 = insertvalue { void (i32*, {  }, i32, i32, { void (i32*, {  }, i32, i32)*, {  } })*, {  } } %var_41, {  } %var_29, 1
    store { void (i32*, {  }, i32, i32, { void (i32*, {  }, i32, i32)*, {  } })*, {  } } %var_42, ptr %var_39
    %var_44 = load i32, ptr @const_43
    %var_46 = load i32, ptr @const_45
    %var_48 = alloca {  }
    %var_49 = load {  }, ptr %var_48
    store {  } %var_49, ptr %var_48
    %var_53 = alloca { void (i32*, {  }, i32)*, {  } }
    %var_54 = load { void (i32*, {  }, i32)*, {  } }, ptr %var_53
    %var_55 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_54, void (i32*, {  }, i32)* @fn_47, 0
    %var_56 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_55, {  } %var_49, 1
    store { void (i32*, {  }, i32)*, {  } } %var_56, ptr %var_53
    %var_57 = extractvalue { void (i32*, {  }, i32, i32, { void (i32*, {  }, i32, i32)*, {  } })*, {  } } %var_42, 0
    %var_58 = extractvalue { void (i32*, {  }, i32, i32, { void (i32*, {  }, i32, i32)*, {  } })*, {  } } %var_42, 1
    %var_59 = alloca i32
    call void %var_57(i32* %var_59, {  } %var_58, i32 %var_44, i32 %var_46, { void (i32*, {  }, i32, i32)*, {  } } %var_56)
    %var_60 = load i32, ptr %var_59
    %var_61 = extractvalue { void (i32*, { }, i32)*, {  } } %var_26, 0
    %var_62 = extractvalue { void (i32*, { }, i32)*, {  } } %var_26, 1
    %var_63 = alloca i32
    call void %var_61(i32* %var_63, { } %var_62, i32 %var_60)
    %var_64 = load i32, ptr %var_63
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_17, { } %var_18, i32 %var_19) {
  entry: 
    %var_20 = call i32 @print_int(i32 %var_19)
    store i32 %var_20, ptr %var_17
    ret void
}
define void @fn_27(ptr sret(i32) %var_30, {  } %var_31, i32 %var_32, i32 %var_33, { void (i32*, {  }, i32, i32)*, {  } } %var_34) {
  entry: 
    %var_35 = extractvalue { void (i32*, {  }, i32, i32)*, {  } } %var_34, 0
    %var_36 = extractvalue { void (i32*, {  }, i32, i32)*, {  } } %var_34, 1
    %var_37 = alloca i32
    call void %var_35(i32* %var_37, {  } %var_36, i32 %var_32, i32 %var_33)
    %var_38 = load i32, ptr %var_37
    store i32 %var_38, ptr %var_30
    ret void
}
define void @fn_47(ptr sret(i32) %var_50, {  } %var_51, i32 %var_52) {
  entry: 
    store i32 %var_52, ptr %var_50
    ret void
}
"
`;

exports[`simply typed lambda calc compilation > church tuple 2 > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > church tuple 2 > stdout 1`] = `
[
  "1
",
]
`;

exports[`simply typed lambda calc compilation > either > compiled 1`] = `
"@const_72 = constant i32 1
define i32 @main() {
  main: 
    %var_26 = alloca {  }
    %var_27 = load {  }, ptr %var_26
    store {  } %var_27, ptr %var_26
    %var_28 = alloca { void (i32*, { }, i32)*, {  } }
    %var_29 = load { void (i32*, { }, i32)*, {  } }, ptr %var_28
    %var_30 = insertvalue { void (i32*, { }, i32)*, {  } } %var_29, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_31 = insertvalue { void (i32*, { }, i32)*, {  } } %var_30, {  } %var_27, 1
    store { void (i32*, { }, i32)*, {  } } %var_31, ptr %var_28
    %var_33 = alloca {  }
    %var_34 = load {  }, ptr %var_33
    store {  } %var_34, ptr %var_33
    %var_68 = alloca { void ({ void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }*, {  }, i32)*, {  } }
    %var_69 = load { void ({ void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }*, {  }, i32)*, {  } }, ptr %var_68
    %var_70 = insertvalue { void ({ void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }*, {  }, i32)*, {  } } %var_69, void ({ void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }*, {  }, i32)* @fn_32, 0
    %var_71 = insertvalue { void ({ void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }*, {  }, i32)*, {  } } %var_70, {  } %var_34, 1
    store { void ({ void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }*, {  }, i32)*, {  } } %var_71, ptr %var_68
    %var_73 = load i32, ptr @const_72
    %var_74 = extractvalue { void ({ void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }*, {  }, i32)*, {  } } %var_71, 0
    %var_75 = extractvalue { void ({ void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }*, {  }, i32)*, {  } } %var_71, 1
    %var_76 = alloca { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }
    call void %var_74({ void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }* %var_76, {  } %var_75, i32 %var_73)
    %var_77 = load { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }, ptr %var_76
    %var_79 = alloca {  }
    %var_80 = load {  }, ptr %var_79
    store {  } %var_80, ptr %var_79
    %var_84 = alloca { void (i32*, {  }, i32)*, {  } }
    %var_85 = load { void (i32*, {  }, i32)*, {  } }, ptr %var_84
    %var_86 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_85, void (i32*, {  }, i32)* @fn_78, 0
    %var_87 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_86, {  } %var_80, 1
    store { void (i32*, {  }, i32)*, {  } } %var_87, ptr %var_84
    %var_88 = extractvalue { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } } %var_77, 0
    %var_89 = extractvalue { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } } %var_77, 1
    %var_90 = alloca { void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }
    call void %var_88({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }* %var_90, { i32 } %var_89, { void (i32*, {  }, i32)*, {  } } %var_87)
    %var_91 = load { void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }, ptr %var_90
    %var_93 = alloca {  }
    %var_94 = load {  }, ptr %var_93
    store {  } %var_94, ptr %var_93
    %var_98 = alloca { void (i32*, {  }, i32)*, {  } }
    %var_99 = load { void (i32*, {  }, i32)*, {  } }, ptr %var_98
    %var_100 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_99, void (i32*, {  }, i32)* @fn_92, 0
    %var_101 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_100, {  } %var_94, 1
    store { void (i32*, {  }, i32)*, {  } } %var_101, ptr %var_98
    %var_102 = extractvalue { void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } } %var_91, 0
    %var_103 = extractvalue { void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } } %var_91, 1
    %var_104 = alloca i32
    call void %var_102(i32* %var_104, { { void (i32*, {  }, i32)*, {  } }, i32 } %var_103, { void (i32*, {  }, i32)*, {  } } %var_101)
    %var_105 = load i32, ptr %var_104
    %var_106 = extractvalue { void (i32*, { }, i32)*, {  } } %var_31, 0
    %var_107 = extractvalue { void (i32*, { }, i32)*, {  } } %var_31, 1
    %var_108 = alloca i32
    call void %var_106(i32* %var_108, { } %var_107, i32 %var_105)
    %var_109 = load i32, ptr %var_108
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_22, { } %var_23, i32 %var_24) {
  entry: 
    %var_25 = call i32 @print_int(i32 %var_24)
    store i32 %var_25, ptr %var_22
    ret void
}
define void @fn_32(ptr sret({ void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }) %var_35, {  } %var_36, i32 %var_37) {
  entry: 
    %var_39 = alloca { i32 }
    %var_40 = load { i32 }, ptr %var_39
    %var_41 = insertvalue { i32 } %var_40, i32 %var_37, 0
    store { i32 } %var_41, ptr %var_39
    %var_64 = alloca { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }
    %var_65 = load { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } }, ptr %var_64
    %var_66 = insertvalue { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } } %var_65, void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })* @fn_38, 0
    %var_67 = insertvalue { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } } %var_66, { i32 } %var_41, 1
    store { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } } %var_67, ptr %var_64
    store { void ({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }*, { i32 }, { void (i32*, {  }, i32)*, {  } })*, { i32 } } %var_67, ptr %var_35
    ret void
}
define void @fn_38(ptr sret({ void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }) %var_42, { i32 } %var_43, { void (i32*, {  }, i32)*, {  } } %var_44) {
  entry: 
    %var_45 = extractvalue { i32 } %var_43, 0
    %var_47 = alloca { { void (i32*, {  }, i32)*, {  } }, i32 }
    %var_48 = load { { void (i32*, {  }, i32)*, {  } }, i32 }, ptr %var_47
    %var_49 = insertvalue { { void (i32*, {  }, i32)*, {  } }, i32 } %var_48, { void (i32*, {  }, i32)*, {  } } %var_44, 0
    %var_50 = insertvalue { { void (i32*, {  }, i32)*, {  } }, i32 } %var_49, i32 %var_45, 1
    store { { void (i32*, {  }, i32)*, {  } }, i32 } %var_50, ptr %var_47
    %var_60 = alloca { void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }
    %var_61 = load { void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } }, ptr %var_60
    %var_62 = insertvalue { void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } } %var_61, void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })* @fn_46, 0
    %var_63 = insertvalue { void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } } %var_62, { { void (i32*, {  }, i32)*, {  } }, i32 } %var_50, 1
    store { void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } } %var_63, ptr %var_60
    store { void (i32*, { { void (i32*, {  }, i32)*, {  } }, i32 }, { void (i32*, {  }, i32)*, {  } })*, { { void (i32*, {  }, i32)*, {  } }, i32 } } %var_63, ptr %var_42
    ret void
}
define void @fn_46(ptr sret(i32) %var_51, { { void (i32*, {  }, i32)*, {  } }, i32 } %var_52, { void (i32*, {  }, i32)*, {  } } %var_53) {
  entry: 
    %var_54 = extractvalue { { void (i32*, {  }, i32)*, {  } }, i32 } %var_52, 0
    %var_55 = extractvalue { { void (i32*, {  }, i32)*, {  } }, i32 } %var_52, 1
    %var_56 = extractvalue { void (i32*, {  }, i32)*, {  } } %var_54, 0
    %var_57 = extractvalue { void (i32*, {  }, i32)*, {  } } %var_54, 1
    %var_58 = alloca i32
    call void %var_56(i32* %var_58, {  } %var_57, i32 %var_55)
    %var_59 = load i32, ptr %var_58
    store i32 %var_59, ptr %var_51
    ret void
}
define void @fn_78(ptr sret(i32) %var_81, {  } %var_82, i32 %var_83) {
  entry: 
    store i32 %var_83, ptr %var_81
    ret void
}
define void @fn_92(ptr sret(i32) %var_95, {  } %var_96, i32 %var_97) {
  entry: 
    store i32 %var_97, ptr %var_95
    ret void
}
"
`;

exports[`simply typed lambda calc compilation > either > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > either > stdout 1`] = `
[
  "1
",
]
`;

exports[`simply typed lambda calc compilation > either 2 > compiled 1`] = `
"@const_44 = constant i32 1
define i32 @main() {
  main: 
    %var_22 = alloca {  }
    %var_23 = load {  }, ptr %var_22
    store {  } %var_23, ptr %var_22
    %var_24 = alloca { void (i32*, { }, i32)*, {  } }
    %var_25 = load { void (i32*, { }, i32)*, {  } }, ptr %var_24
    %var_26 = insertvalue { void (i32*, { }, i32)*, {  } } %var_25, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_27 = insertvalue { void (i32*, { }, i32)*, {  } } %var_26, {  } %var_23, 1
    store { void (i32*, { }, i32)*, {  } } %var_27, ptr %var_24
    %var_29 = alloca {  }
    %var_30 = load {  }, ptr %var_29
    store {  } %var_30, ptr %var_29
    %var_40 = alloca { void (i32*, {  }, i32, { void (i32*, {  }, i32)*, {  } }, { void (i32*, {  }, i32)*, {  } })*, {  } }
    %var_41 = load { void (i32*, {  }, i32, { void (i32*, {  }, i32)*, {  } }, { void (i32*, {  }, i32)*, {  } })*, {  } }, ptr %var_40
    %var_42 = insertvalue { void (i32*, {  }, i32, { void (i32*, {  }, i32)*, {  } }, { void (i32*, {  }, i32)*, {  } })*, {  } } %var_41, void (i32*, {  }, i32, { void (i32*, {  }, i32)*, {  } }, { void (i32*, {  }, i32)*, {  } })* @fn_28, 0
    %var_43 = insertvalue { void (i32*, {  }, i32, { void (i32*, {  }, i32)*, {  } }, { void (i32*, {  }, i32)*, {  } })*, {  } } %var_42, {  } %var_30, 1
    store { void (i32*, {  }, i32, { void (i32*, {  }, i32)*, {  } }, { void (i32*, {  }, i32)*, {  } })*, {  } } %var_43, ptr %var_40
    %var_45 = load i32, ptr @const_44
    %var_47 = alloca {  }
    %var_48 = load {  }, ptr %var_47
    store {  } %var_48, ptr %var_47
    %var_52 = alloca { void (i32*, {  }, i32)*, {  } }
    %var_53 = load { void (i32*, {  }, i32)*, {  } }, ptr %var_52
    %var_54 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_53, void (i32*, {  }, i32)* @fn_46, 0
    %var_55 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_54, {  } %var_48, 1
    store { void (i32*, {  }, i32)*, {  } } %var_55, ptr %var_52
    %var_57 = alloca {  }
    %var_58 = load {  }, ptr %var_57
    store {  } %var_58, ptr %var_57
    %var_62 = alloca { void (i32*, {  }, i32)*, {  } }
    %var_63 = load { void (i32*, {  }, i32)*, {  } }, ptr %var_62
    %var_64 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_63, void (i32*, {  }, i32)* @fn_56, 0
    %var_65 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_64, {  } %var_58, 1
    store { void (i32*, {  }, i32)*, {  } } %var_65, ptr %var_62
    %var_66 = extractvalue { void (i32*, {  }, i32, { void (i32*, {  }, i32)*, {  } }, { void (i32*, {  }, i32)*, {  } })*, {  } } %var_43, 0
    %var_67 = extractvalue { void (i32*, {  }, i32, { void (i32*, {  }, i32)*, {  } }, { void (i32*, {  }, i32)*, {  } })*, {  } } %var_43, 1
    %var_68 = alloca i32
    call void %var_66(i32* %var_68, {  } %var_67, i32 %var_45, { void (i32*, {  }, i32)*, {  } } %var_55, { void (i32*, {  }, i32)*, {  } } %var_65)
    %var_69 = load i32, ptr %var_68
    %var_70 = extractvalue { void (i32*, { }, i32)*, {  } } %var_27, 0
    %var_71 = extractvalue { void (i32*, { }, i32)*, {  } } %var_27, 1
    %var_72 = alloca i32
    call void %var_70(i32* %var_72, { } %var_71, i32 %var_69)
    %var_73 = load i32, ptr %var_72
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_18, { } %var_19, i32 %var_20) {
  entry: 
    %var_21 = call i32 @print_int(i32 %var_20)
    store i32 %var_21, ptr %var_18
    ret void
}
define void @fn_28(ptr sret(i32) %var_31, {  } %var_32, i32 %var_33, { void (i32*, {  }, i32)*, {  } } %var_34, { void (i32*, {  }, i32)*, {  } } %var_35) {
  entry: 
    %var_36 = extractvalue { void (i32*, {  }, i32)*, {  } } %var_34, 0
    %var_37 = extractvalue { void (i32*, {  }, i32)*, {  } } %var_34, 1
    %var_38 = alloca i32
    call void %var_36(i32* %var_38, {  } %var_37, i32 %var_33)
    %var_39 = load i32, ptr %var_38
    store i32 %var_39, ptr %var_31
    ret void
}
define void @fn_46(ptr sret(i32) %var_49, {  } %var_50, i32 %var_51) {
  entry: 
    store i32 %var_51, ptr %var_49
    ret void
}
define void @fn_56(ptr sret(i32) %var_59, {  } %var_60, i32 %var_61) {
  entry: 
    store i32 %var_61, ptr %var_59
    ret void
}
"
`;

exports[`simply typed lambda calc compilation > either 2 > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > either 2 > stdout 1`] = `
[
  "1
",
]
`;

exports[`simply typed lambda calc compilation > function application and literal print > compiled 1`] = `
"@const_31 = constant i32 2
define i32 @main() {
  main: 
    %var_14 = alloca {  }
    %var_15 = load {  }, ptr %var_14
    store {  } %var_15, ptr %var_14
    %var_16 = alloca { void (i32*, { }, i32)*, {  } }
    %var_17 = load { void (i32*, { }, i32)*, {  } }, ptr %var_16
    %var_18 = insertvalue { void (i32*, { }, i32)*, {  } } %var_17, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_19 = insertvalue { void (i32*, { }, i32)*, {  } } %var_18, {  } %var_15, 1
    store { void (i32*, { }, i32)*, {  } } %var_19, ptr %var_16
    %var_21 = alloca {  }
    %var_22 = load {  }, ptr %var_21
    store {  } %var_22, ptr %var_21
    %var_27 = alloca { void (i32*, {  }, i32)*, {  } }
    %var_28 = load { void (i32*, {  }, i32)*, {  } }, ptr %var_27
    %var_29 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_28, void (i32*, {  }, i32)* @fn_20, 0
    %var_30 = insertvalue { void (i32*, {  }, i32)*, {  } } %var_29, {  } %var_22, 1
    store { void (i32*, {  }, i32)*, {  } } %var_30, ptr %var_27
    %var_32 = load i32, ptr @const_31
    %var_33 = extractvalue { void (i32*, {  }, i32)*, {  } } %var_30, 0
    %var_34 = extractvalue { void (i32*, {  }, i32)*, {  } } %var_30, 1
    %var_35 = alloca i32
    call void %var_33(i32* %var_35, {  } %var_34, i32 %var_32)
    %var_36 = load i32, ptr %var_35
    %var_37 = extractvalue { void (i32*, { }, i32)*, {  } } %var_19, 0
    %var_38 = extractvalue { void (i32*, { }, i32)*, {  } } %var_19, 1
    %var_39 = alloca i32
    call void %var_37(i32* %var_39, { } %var_38, i32 %var_36)
    %var_40 = load i32, ptr %var_39
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_10, { } %var_11, i32 %var_12) {
  entry: 
    %var_13 = call i32 @print_int(i32 %var_12)
    store i32 %var_13, ptr %var_10
    ret void
}
define void @fn_20(ptr sret(i32) %var_23, {  } %var_24, i32 %var_25) {
  entry: 
    %var_26 = add i32 %var_25, %var_25
    store i32 %var_26, ptr %var_23
    ret void
}
"
`;

exports[`simply typed lambda calc compilation > function application and literal print > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > function application and literal print > stdout 1`] = `
[
  "4
",
]
`;

exports[`simply typed lambda calc compilation > function closure > compiled 1`] = `
"@const_40 = constant i32 2
@const_52 = constant i32 1
define i32 @main() {
  main: 
    %var_20 = alloca {  }
    %var_21 = load {  }, ptr %var_20
    store {  } %var_21, ptr %var_20
    %var_22 = alloca { void (i32*, { }, i32)*, {  } }
    %var_23 = load { void (i32*, { }, i32)*, {  } }, ptr %var_22
    %var_24 = insertvalue { void (i32*, { }, i32)*, {  } } %var_23, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_25 = insertvalue { void (i32*, { }, i32)*, {  } } %var_24, {  } %var_21, 1
    store { void (i32*, { }, i32)*, {  } } %var_25, ptr %var_22
    %var_27 = alloca {  }
    %var_28 = load {  }, ptr %var_27
    store {  } %var_28, ptr %var_27
    %var_48 = alloca { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } }
    %var_49 = load { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } }, ptr %var_48
    %var_50 = insertvalue { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_49, void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)* @fn_26, 0
    %var_51 = insertvalue { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_50, {  } %var_28, 1
    store { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_51, ptr %var_48
    %var_53 = load i32, ptr @const_52
    %var_54 = extractvalue { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_51, 0
    %var_55 = extractvalue { void ({ void (i32*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_51, 1
    %var_56 = alloca { void (i32*, { i32 }, i32)*, { i32 } }
    call void %var_54({ void (i32*, { i32 }, i32)*, { i32 } }* %var_56, {  } %var_55, i32 %var_53)
    %var_57 = load { void (i32*, { i32 }, i32)*, { i32 } }, ptr %var_56
    %var_58 = load i32, ptr @const_40
    %var_59 = extractvalue { void (i32*, { i32 }, i32)*, { i32 } } %var_57, 0
    %var_60 = extractvalue { void (i32*, { i32 }, i32)*, { i32 } } %var_57, 1
    %var_61 = alloca i32
    call void %var_59(i32* %var_61, { i32 } %var_60, i32 %var_58)
    %var_62 = load i32, ptr %var_61
    %var_63 = extractvalue { void (i32*, { }, i32)*, {  } } %var_25, 0
    %var_64 = extractvalue { void (i32*, { }, i32)*, {  } } %var_25, 1
    %var_65 = alloca i32
    call void %var_63(i32* %var_65, { } %var_64, i32 %var_62)
    %var_66 = load i32, ptr %var_65
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_16, { } %var_17, i32 %var_18) {
  entry: 
    %var_19 = call i32 @print_int(i32 %var_18)
    store i32 %var_19, ptr %var_16
    ret void
}
define void @fn_26(ptr sret({ void (i32*, { i32 }, i32)*, { i32 } }) %var_29, {  } %var_30, i32 %var_31) {
  entry: 
    %var_33 = alloca { i32 }
    %var_34 = load { i32 }, ptr %var_33
    %var_35 = insertvalue { i32 } %var_34, i32 %var_31, 0
    store { i32 } %var_35, ptr %var_33
    %var_44 = alloca { void (i32*, { i32 }, i32)*, { i32 } }
    %var_45 = load { void (i32*, { i32 }, i32)*, { i32 } }, ptr %var_44
    %var_46 = insertvalue { void (i32*, { i32 }, i32)*, { i32 } } %var_45, void (i32*, { i32 }, i32)* @fn_32, 0
    %var_47 = insertvalue { void (i32*, { i32 }, i32)*, { i32 } } %var_46, { i32 } %var_35, 1
    store { void (i32*, { i32 }, i32)*, { i32 } } %var_47, ptr %var_44
    store { void (i32*, { i32 }, i32)*, { i32 } } %var_47, ptr %var_29
    ret void
}
define void @fn_32(ptr sret(i32) %var_36, { i32 } %var_37, i32 %var_38) {
  entry: 
    %var_39 = extractvalue { i32 } %var_37, 0
    %var_41 = load i32, ptr @const_40
    %var_42 = mul i32 %var_41, %var_39
    %var_43 = add i32 %var_38, %var_42
    store i32 %var_43, ptr %var_36
    ret void
}
"
`;

exports[`simply typed lambda calc compilation > function closure > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > function closure > stdout 1`] = `
[
  "4
",
]
`;

exports[`simply typed lambda calc compilation > function deep closure > compiled 1`] = `
"@const_68 = constant i32 1
@const_74 = constant i32 3
@const_80 = constant i32 5
define i32 @main() {
  main: 
    %var_24 = alloca {  }
    %var_25 = load {  }, ptr %var_24
    store {  } %var_25, ptr %var_24
    %var_26 = alloca { void (i32*, { }, i32)*, {  } }
    %var_27 = load { void (i32*, { }, i32)*, {  } }, ptr %var_26
    %var_28 = insertvalue { void (i32*, { }, i32)*, {  } } %var_27, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_29 = insertvalue { void (i32*, { }, i32)*, {  } } %var_28, {  } %var_25, 1
    store { void (i32*, { }, i32)*, {  } } %var_29, ptr %var_26
    %var_31 = alloca {  }
    %var_32 = load {  }, ptr %var_31
    store {  } %var_32, ptr %var_31
    %var_64 = alloca { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } }
    %var_65 = load { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } }, ptr %var_64
    %var_66 = insertvalue { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_65, void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)* @fn_30, 0
    %var_67 = insertvalue { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_66, {  } %var_32, 1
    store { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_67, ptr %var_64
    %var_69 = load i32, ptr @const_68
    %var_70 = extractvalue { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_67, 0
    %var_71 = extractvalue { void ({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }*, {  }, i32)*, {  } } %var_67, 1
    %var_72 = alloca { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }
    call void %var_70({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }* %var_72, {  } %var_71, i32 %var_69)
    %var_73 = load { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }, ptr %var_72
    %var_75 = load i32, ptr @const_74
    %var_76 = extractvalue { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_73, 0
    %var_77 = extractvalue { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_73, 1
    %var_78 = alloca { void (i32*, { i32, i32 }, i32)*, { i32, i32 } }
    call void %var_76({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }* %var_78, { i32 } %var_77, i32 %var_75)
    %var_79 = load { void (i32*, { i32, i32 }, i32)*, { i32, i32 } }, ptr %var_78
    %var_81 = load i32, ptr @const_80
    %var_82 = extractvalue { void (i32*, { i32, i32 }, i32)*, { i32, i32 } } %var_79, 0
    %var_83 = extractvalue { void (i32*, { i32, i32 }, i32)*, { i32, i32 } } %var_79, 1
    %var_84 = alloca i32
    call void %var_82(i32* %var_84, { i32, i32 } %var_83, i32 %var_81)
    %var_85 = load i32, ptr %var_84
    %var_86 = extractvalue { void (i32*, { }, i32)*, {  } } %var_29, 0
    %var_87 = extractvalue { void (i32*, { }, i32)*, {  } } %var_29, 1
    %var_88 = alloca i32
    call void %var_86(i32* %var_88, { } %var_87, i32 %var_85)
    %var_89 = load i32, ptr %var_88
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_20, { } %var_21, i32 %var_22) {
  entry: 
    %var_23 = call i32 @print_int(i32 %var_22)
    store i32 %var_23, ptr %var_20
    ret void
}
define void @fn_30(ptr sret({ void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }) %var_33, {  } %var_34, i32 %var_35) {
  entry: 
    %var_37 = alloca { i32 }
    %var_38 = load { i32 }, ptr %var_37
    %var_39 = insertvalue { i32 } %var_38, i32 %var_35, 0
    store { i32 } %var_39, ptr %var_37
    %var_60 = alloca { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }
    %var_61 = load { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } }, ptr %var_60
    %var_62 = insertvalue { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_61, void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)* @fn_36, 0
    %var_63 = insertvalue { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_62, { i32 } %var_39, 1
    store { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_63, ptr %var_60
    store { void ({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }*, { i32 }, i32)*, { i32 } } %var_63, ptr %var_33
    ret void
}
define void @fn_36(ptr sret({ void (i32*, { i32, i32 }, i32)*, { i32, i32 } }) %var_40, { i32 } %var_41, i32 %var_42) {
  entry: 
    %var_43 = extractvalue { i32 } %var_41, 0
    %var_45 = alloca { i32, i32 }
    %var_46 = load { i32, i32 }, ptr %var_45
    %var_47 = insertvalue { i32, i32 } %var_46, i32 %var_43, 0
    %var_48 = insertvalue { i32, i32 } %var_47, i32 %var_42, 1
    store { i32, i32 } %var_48, ptr %var_45
    %var_56 = alloca { void (i32*, { i32, i32 }, i32)*, { i32, i32 } }
    %var_57 = load { void (i32*, { i32, i32 }, i32)*, { i32, i32 } }, ptr %var_56
    %var_58 = insertvalue { void (i32*, { i32, i32 }, i32)*, { i32, i32 } } %var_57, void (i32*, { i32, i32 }, i32)* @fn_44, 0
    %var_59 = insertvalue { void (i32*, { i32, i32 }, i32)*, { i32, i32 } } %var_58, { i32, i32 } %var_48, 1
    store { void (i32*, { i32, i32 }, i32)*, { i32, i32 } } %var_59, ptr %var_56
    store { void (i32*, { i32, i32 }, i32)*, { i32, i32 } } %var_59, ptr %var_40
    ret void
}
define void @fn_44(ptr sret(i32) %var_49, { i32, i32 } %var_50, i32 %var_51) {
  entry: 
    %var_52 = extractvalue { i32, i32 } %var_50, 0
    %var_53 = extractvalue { i32, i32 } %var_50, 1
    %var_54 = add i32 %var_53, %var_51
    %var_55 = add i32 %var_52, %var_54
    store i32 %var_55, ptr %var_49
    ret void
}
"
`;

exports[`simply typed lambda calc compilation > function deep closure > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > function deep closure > stdout 1`] = `
[
  "9
",
]
`;

exports[`simply typed lambda calc compilation > function multiple args > compiled 1`] = `
"@const_31 = constant i32 2
@const_39 = constant i32 1
define i32 @main() {
  main: 
    %var_18 = alloca {  }
    %var_19 = load {  }, ptr %var_18
    store {  } %var_19, ptr %var_18
    %var_20 = alloca { void (i32*, { }, i32)*, {  } }
    %var_21 = load { void (i32*, { }, i32)*, {  } }, ptr %var_20
    %var_22 = insertvalue { void (i32*, { }, i32)*, {  } } %var_21, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_23 = insertvalue { void (i32*, { }, i32)*, {  } } %var_22, {  } %var_19, 1
    store { void (i32*, { }, i32)*, {  } } %var_23, ptr %var_20
    %var_25 = alloca {  }
    %var_26 = load {  }, ptr %var_25
    store {  } %var_26, ptr %var_25
    %var_35 = alloca { void (i32*, {  }, i32, i32)*, {  } }
    %var_36 = load { void (i32*, {  }, i32, i32)*, {  } }, ptr %var_35
    %var_37 = insertvalue { void (i32*, {  }, i32, i32)*, {  } } %var_36, void (i32*, {  }, i32, i32)* @fn_24, 0
    %var_38 = insertvalue { void (i32*, {  }, i32, i32)*, {  } } %var_37, {  } %var_26, 1
    store { void (i32*, {  }, i32, i32)*, {  } } %var_38, ptr %var_35
    %var_40 = load i32, ptr @const_39
    %var_41 = load i32, ptr @const_31
    %var_42 = extractvalue { void (i32*, {  }, i32, i32)*, {  } } %var_38, 0
    %var_43 = extractvalue { void (i32*, {  }, i32, i32)*, {  } } %var_38, 1
    %var_44 = alloca i32
    call void %var_42(i32* %var_44, {  } %var_43, i32 %var_40, i32 %var_41)
    %var_45 = load i32, ptr %var_44
    %var_46 = extractvalue { void (i32*, { }, i32)*, {  } } %var_23, 0
    %var_47 = extractvalue { void (i32*, { }, i32)*, {  } } %var_23, 1
    %var_48 = alloca i32
    call void %var_46(i32* %var_48, { } %var_47, i32 %var_45)
    %var_49 = load i32, ptr %var_48
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_14, { } %var_15, i32 %var_16) {
  entry: 
    %var_17 = call i32 @print_int(i32 %var_16)
    store i32 %var_17, ptr %var_14
    ret void
}
define void @fn_24(ptr sret(i32) %var_27, {  } %var_28, i32 %var_29, i32 %var_30) {
  entry: 
    %var_32 = load i32, ptr @const_31
    %var_33 = mul i32 %var_32, %var_29
    %var_34 = add i32 %var_30, %var_33
    store i32 %var_34, ptr %var_27
    ret void
}
"
`;

exports[`simply typed lambda calc compilation > function multiple args > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > function multiple args > stdout 1`] = `
[
  "4
",
]
`;

exports[`simply typed lambda calc compilation > hello world > compiled 1`] = `
"@const_14 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    %var_8 = alloca {  }
    %var_9 = load {  }, ptr %var_8
    store {  } %var_9, ptr %var_8
    %var_10 = alloca { void (i8**, { }, i8*)*, {  } }
    %var_11 = load { void (i8**, { }, i8*)*, {  } }, ptr %var_10
    %var_12 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_11, void (i8**, { }, i8*)* @print_string_wrap, 0
    %var_13 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_12, {  } %var_9, 1
    store { void (i8**, { }, i8*)*, {  } } %var_13, ptr %var_10
    %var_15 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_13, 0
    %var_16 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_13, 1
    %var_17 = alloca i8*
    call void %var_15(i8** %var_17, { } %var_16, i8* @const_14)
    %var_18 = load i8*, ptr %var_17
    ret i32 0
}
declare i8* @print_string(i8*)
define void @print_string_wrap(ptr sret(i8*) %var_4, { } %var_5, i8* %var_6) {
  entry: 
    %var_7 = call i8* @print_string(i8* %var_6)
    store i8* %var_7, ptr %var_4
    ret void
}
"
`;

exports[`simply typed lambda calc compilation > hello world > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > hello world > stdout 1`] = `
[
  "hello world!
",
]
`;

exports[`simply typed lambda calc compilation > hello world string > compiled 1`] = `
"@const_2 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    ret i32 0
}
"
`;

exports[`simply typed lambda calc compilation > hello world string > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > hello world string > stdout 1`] = `[]`;

exports[`simply typed lambda calc compilation > hello world twice > compiled 1`] = `
"@const_17 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    %var_11 = alloca {  }
    %var_12 = load {  }, ptr %var_11
    store {  } %var_12, ptr %var_11
    %var_13 = alloca { void (i8**, { }, i8*)*, {  } }
    %var_14 = load { void (i8**, { }, i8*)*, {  } }, ptr %var_13
    %var_15 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_14, void (i8**, { }, i8*)* @print_string_wrap, 0
    %var_16 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_15, {  } %var_12, 1
    store { void (i8**, { }, i8*)*, {  } } %var_16, ptr %var_13
    %var_18 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_16, 0
    %var_19 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_16, 1
    %var_20 = alloca i8*
    call void %var_18(i8** %var_20, { } %var_19, i8* @const_17)
    %var_21 = load i8*, ptr %var_20
    %var_22 = alloca {  }
    %var_23 = load {  }, ptr %var_22
    store {  } %var_23, ptr %var_22
    %var_24 = alloca { void (i8**, { }, i8*)*, {  } }
    %var_25 = load { void (i8**, { }, i8*)*, {  } }, ptr %var_24
    %var_26 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_25, void (i8**, { }, i8*)* @print_string_wrap, 0
    %var_27 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_26, {  } %var_23, 1
    store { void (i8**, { }, i8*)*, {  } } %var_27, ptr %var_24
    %var_28 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_27, 0
    %var_29 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_27, 1
    %var_30 = alloca i8*
    call void %var_28(i8** %var_30, { } %var_29, i8* @const_17)
    %var_31 = load i8*, ptr %var_30
    ret i32 0
}
declare i8* @print_string(i8*)
define void @print_string_wrap(ptr sret(i8*) %var_7, { } %var_8, i8* %var_9) {
  entry: 
    %var_10 = call i8* @print_string(i8* %var_9)
    store i8* %var_10, ptr %var_7
    ret void
}
"
`;

exports[`simply typed lambda calc compilation > hello world twice > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > hello world twice > stdout 1`] = `
[
  "hello world!
hello world!
",
]
`;

exports[`simply typed lambda calc compilation > print number > compiled 1`] = `
"@const_14 = constant i32 1
define i32 @main() {
  main: 
    %var_8 = alloca {  }
    %var_9 = load {  }, ptr %var_8
    store {  } %var_9, ptr %var_8
    %var_10 = alloca { void (i32*, { }, i32)*, {  } }
    %var_11 = load { void (i32*, { }, i32)*, {  } }, ptr %var_10
    %var_12 = insertvalue { void (i32*, { }, i32)*, {  } } %var_11, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_13 = insertvalue { void (i32*, { }, i32)*, {  } } %var_12, {  } %var_9, 1
    store { void (i32*, { }, i32)*, {  } } %var_13, ptr %var_10
    %var_15 = load i32, ptr @const_14
    %var_16 = extractvalue { void (i32*, { }, i32)*, {  } } %var_13, 0
    %var_17 = extractvalue { void (i32*, { }, i32)*, {  } } %var_13, 1
    %var_18 = alloca i32
    call void %var_16(i32* %var_18, { } %var_17, i32 %var_15)
    %var_19 = load i32, ptr %var_18
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_4, { } %var_5, i32 %var_6) {
  entry: 
    %var_7 = call i32 @print_int(i32 %var_6)
    store i32 %var_7, ptr %var_4
    ret void
}
"
`;

exports[`simply typed lambda calc compilation > print number > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > print number > stdout 1`] = `
[
  "1
",
]
`;

exports[`simply typed lambda calc compilation > two prints > compiled 1`] = `
"@const_17 = constant [13 x i8] c"hello world!\\00"
@const_28 = constant [15 x i8] c"hello world 2!\\00"
define i32 @main() {
  main: 
    %var_11 = alloca {  }
    %var_12 = load {  }, ptr %var_11
    store {  } %var_12, ptr %var_11
    %var_13 = alloca { void (i8**, { }, i8*)*, {  } }
    %var_14 = load { void (i8**, { }, i8*)*, {  } }, ptr %var_13
    %var_15 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_14, void (i8**, { }, i8*)* @print_string_wrap, 0
    %var_16 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_15, {  } %var_12, 1
    store { void (i8**, { }, i8*)*, {  } } %var_16, ptr %var_13
    %var_18 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_16, 0
    %var_19 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_16, 1
    %var_20 = alloca i8*
    call void %var_18(i8** %var_20, { } %var_19, i8* @const_17)
    %var_21 = load i8*, ptr %var_20
    %var_22 = alloca {  }
    %var_23 = load {  }, ptr %var_22
    store {  } %var_23, ptr %var_22
    %var_24 = alloca { void (i8**, { }, i8*)*, {  } }
    %var_25 = load { void (i8**, { }, i8*)*, {  } }, ptr %var_24
    %var_26 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_25, void (i8**, { }, i8*)* @print_string_wrap, 0
    %var_27 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_26, {  } %var_23, 1
    store { void (i8**, { }, i8*)*, {  } } %var_27, ptr %var_24
    %var_29 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_27, 0
    %var_30 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_27, 1
    %var_31 = alloca i8*
    call void %var_29(i8** %var_31, { } %var_30, i8* @const_28)
    %var_32 = load i8*, ptr %var_31
    ret i32 0
}
declare i8* @print_string(i8*)
define void @print_string_wrap(ptr sret(i8*) %var_7, { } %var_8, i8* %var_9) {
  entry: 
    %var_10 = call i8* @print_string(i8* %var_9)
    store i8* %var_10, ptr %var_7
    ret void
}
"
`;

exports[`simply typed lambda calc compilation > two prints > stderr 1`] = `[]`;

exports[`simply typed lambda calc compilation > two prints > stdout 1`] = `
[
  "hello world!
hello world 2!
",
]
`;

exports[`structured programming compilation > block > compiled 1`] = `
"@const_19 = constant i32 123
@const_21 = constant i32 234
@const_23 = constant i32 345
@const_25 = constant i32 456
define i32 @main() {
  main: 
    %var_13 = alloca {  }
    %var_14 = load {  }, ptr %var_13
    store {  } %var_14, ptr %var_13
    %var_15 = alloca { void (i32*, { }, i32)*, {  } }
    %var_16 = load { void (i32*, { }, i32)*, {  } }, ptr %var_15
    %var_17 = insertvalue { void (i32*, { }, i32)*, {  } } %var_16, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_18 = insertvalue { void (i32*, { }, i32)*, {  } } %var_17, {  } %var_14, 1
    store { void (i32*, { }, i32)*, {  } } %var_18, ptr %var_15
    %var_20 = load i32, ptr @const_19
    %var_22 = load i32, ptr @const_21
    %var_24 = load i32, ptr @const_23
    %var_26 = load i32, ptr @const_25
    %var_27 = extractvalue { void (i32*, { }, i32)*, {  } } %var_18, 0
    %var_28 = extractvalue { void (i32*, { }, i32)*, {  } } %var_18, 1
    %var_29 = alloca i32
    call void %var_27(i32* %var_29, { } %var_28, i32 %var_26)
    %var_30 = load i32, ptr %var_29
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_9, { } %var_10, i32 %var_11) {
  entry: 
    %var_12 = call i32 @print_int(i32 %var_11)
    store i32 %var_12, ptr %var_9
    ret void
}
"
`;

exports[`structured programming compilation > block > stderr 1`] = `[]`;

exports[`structured programming compilation > block > stdout 1`] = `
[
  "456
",
]
`;

exports[`structured programming compilation > block variable assingment > compiled 1`] = `
"@const_25 = constant i32 123
@const_27 = constant i32 1
define i32 @main() {
  main: 
    %var_19 = alloca {  }
    %var_20 = load {  }, ptr %var_19
    store {  } %var_20, ptr %var_19
    %var_21 = alloca { void (i32*, { }, i32)*, {  } }
    %var_22 = load { void (i32*, { }, i32)*, {  } }, ptr %var_21
    %var_23 = insertvalue { void (i32*, { }, i32)*, {  } } %var_22, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_24 = insertvalue { void (i32*, { }, i32)*, {  } } %var_23, {  } %var_20, 1
    store { void (i32*, { }, i32)*, {  } } %var_24, ptr %var_21
    %var_26 = load i32, ptr @const_25
    %var_28 = load i32, ptr @const_27
    %var_29 = add i32 %var_26, %var_28
    %var_30 = extractvalue { void (i32*, { }, i32)*, {  } } %var_24, 0
    %var_31 = extractvalue { void (i32*, { }, i32)*, {  } } %var_24, 1
    %var_32 = alloca i32
    call void %var_30(i32* %var_32, { } %var_31, i32 %var_29)
    %var_33 = load i32, ptr %var_32
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_14, { } %var_15, i32 %var_16) {
  entry17: 
    %var_18 = call i32 @print_int(i32 %var_16)
    store i32 %var_18, ptr %var_14
    ret void
}
"
`;

exports[`structured programming compilation > block variable assingment > stderr 1`] = `[]`;

exports[`structured programming compilation > block variable assingment > stdout 1`] = `
[
  "124
",
]
`;

exports[`structured programming compilation > block variable declaration > compiled 1`] = `
"@const_19 = constant i32 123
define i32 @main() {
  main: 
    %var_13 = alloca {  }
    %var_14 = load {  }, ptr %var_13
    store {  } %var_14, ptr %var_13
    %var_15 = alloca { void (i32*, { }, i32)*, {  } }
    %var_16 = load { void (i32*, { }, i32)*, {  } }, ptr %var_15
    %var_17 = insertvalue { void (i32*, { }, i32)*, {  } } %var_16, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_18 = insertvalue { void (i32*, { }, i32)*, {  } } %var_17, {  } %var_14, 1
    store { void (i32*, { }, i32)*, {  } } %var_18, ptr %var_15
    %var_20 = load i32, ptr @const_19
    %var_21 = extractvalue { void (i32*, { }, i32)*, {  } } %var_18, 0
    %var_22 = extractvalue { void (i32*, { }, i32)*, {  } } %var_18, 1
    %var_23 = alloca i32
    call void %var_21(i32* %var_23, { } %var_22, i32 %var_20)
    %var_24 = load i32, ptr %var_23
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_9, { } %var_10, i32 %var_11) {
  entry: 
    %var_12 = call i32 @print_int(i32 %var_11)
    store i32 %var_12, ptr %var_9
    ret void
}
"
`;

exports[`structured programming compilation > block variable declaration > stderr 1`] = `[]`;

exports[`structured programming compilation > block variable declaration > stdout 1`] = `
[
  "123
",
]
`;

exports[`structured programming compilation > block variable shadowing > compiled 1`] = `
"@const_23 = constant i32 123
@const_25 = constant i32 234
define i32 @main() {
  main: 
    %var_17 = alloca {  }
    %var_18 = load {  }, ptr %var_17
    store {  } %var_18, ptr %var_17
    %var_19 = alloca { void (i32*, { }, i32)*, {  } }
    %var_20 = load { void (i32*, { }, i32)*, {  } }, ptr %var_19
    %var_21 = insertvalue { void (i32*, { }, i32)*, {  } } %var_20, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_22 = insertvalue { void (i32*, { }, i32)*, {  } } %var_21, {  } %var_18, 1
    store { void (i32*, { }, i32)*, {  } } %var_22, ptr %var_19
    %var_24 = load i32, ptr @const_23
    %var_26 = load i32, ptr @const_25
    %var_27 = extractvalue { void (i32*, { }, i32)*, {  } } %var_22, 0
    %var_28 = extractvalue { void (i32*, { }, i32)*, {  } } %var_22, 1
    %var_29 = alloca i32
    call void %var_27(i32* %var_29, { } %var_28, i32 %var_26)
    %var_30 = load i32, ptr %var_29
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_12, { } %var_13, i32 %var_14) {
  entry15: 
    %var_16 = call i32 @print_int(i32 %var_14)
    store i32 %var_16, ptr %var_12
    ret void
}
"
`;

exports[`structured programming compilation > block variable shadowing > stderr 1`] = `[]`;

exports[`structured programming compilation > block variable shadowing > stdout 1`] = `
[
  "234
",
]
`;

exports[`structured programming compilation > hello world twice > compiled 1`] = `
"@const_17 = constant [13 x i8] c"hello world!\\00"
define i32 @main() {
  main: 
    %var_11 = alloca {  }
    %var_12 = load {  }, ptr %var_11
    store {  } %var_12, ptr %var_11
    %var_13 = alloca { void (i8**, { }, i8*)*, {  } }
    %var_14 = load { void (i8**, { }, i8*)*, {  } }, ptr %var_13
    %var_15 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_14, void (i8**, { }, i8*)* @print_string_wrap, 0
    %var_16 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_15, {  } %var_12, 1
    store { void (i8**, { }, i8*)*, {  } } %var_16, ptr %var_13
    %var_18 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_16, 0
    %var_19 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_16, 1
    %var_20 = alloca i8*
    call void %var_18(i8** %var_20, { } %var_19, i8* @const_17)
    %var_21 = load i8*, ptr %var_20
    %var_22 = alloca {  }
    %var_23 = load {  }, ptr %var_22
    store {  } %var_23, ptr %var_22
    %var_24 = alloca { void (i8**, { }, i8*)*, {  } }
    %var_25 = load { void (i8**, { }, i8*)*, {  } }, ptr %var_24
    %var_26 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_25, void (i8**, { }, i8*)* @print_string_wrap, 0
    %var_27 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_26, {  } %var_23, 1
    store { void (i8**, { }, i8*)*, {  } } %var_27, ptr %var_24
    %var_28 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_27, 0
    %var_29 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_27, 1
    %var_30 = alloca i8*
    call void %var_28(i8** %var_30, { } %var_29, i8* @const_17)
    %var_31 = load i8*, ptr %var_30
    ret i32 0
}
declare i8* @print_string(i8*)
define void @print_string_wrap(ptr sret(i8*) %var_7, { } %var_8, i8* %var_9) {
  entry: 
    %var_10 = call i8* @print_string(i8* %var_9)
    store i8* %var_10, ptr %var_7
    ret void
}
"
`;

exports[`structured programming compilation > hello world twice > stderr 1`] = `[]`;

exports[`structured programming compilation > hello world twice > stdout 1`] = `
[
  "hello world!
hello world!
",
]
`;

exports[`structured programming compilation > if-then > compiled 1`] = `
"@const_19 = constant i1 1
@const_23 = constant i32 123
define i32 @main() {
  main: 
    %var_13 = alloca {  }
    %var_14 = load {  }, ptr %var_13
    store {  } %var_14, ptr %var_13
    %var_15 = alloca { void (i32*, { }, i32)*, {  } }
    %var_16 = load { void (i32*, { }, i32)*, {  } }, ptr %var_15
    %var_17 = insertvalue { void (i32*, { }, i32)*, {  } } %var_16, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_18 = insertvalue { void (i32*, { }, i32)*, {  } } %var_17, {  } %var_14, 1
    store { void (i32*, { }, i32)*, {  } } %var_18, ptr %var_15
    %var_20 = load i1, ptr @const_19
    br i1 %var_20, label %then22, label %if_rest21
  then22: 
    %var_24 = load i32, ptr @const_23
    br label %if_rest21
  if_rest21: 
    %var_25 = phi i32 [%var_24, %then22], [undef, %main]
    %var_26 = extractvalue { void (i32*, { }, i32)*, {  } } %var_18, 0
    %var_27 = extractvalue { void (i32*, { }, i32)*, {  } } %var_18, 1
    %var_28 = alloca i32
    call void %var_26(i32* %var_28, { } %var_27, i32 %var_25)
    %var_29 = load i32, ptr %var_28
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_8, { } %var_9, i32 %var_10) {
  entry11: 
    %var_12 = call i32 @print_int(i32 %var_10)
    store i32 %var_12, ptr %var_8
    ret void
}
"
`;

exports[`structured programming compilation > if-then > stderr 1`] = `[]`;

exports[`structured programming compilation > if-then > stdout 1`] = `
[
  "123
",
]
`;

exports[`structured programming compilation > if-then-else > compiled 1`] = `
"@const_22 = constant i1 0
@const_26 = constant i32 123
@const_29 = constant i32 456
define i32 @main() {
  main: 
    %var_16 = alloca {  }
    %var_17 = load {  }, ptr %var_16
    store {  } %var_17, ptr %var_16
    %var_18 = alloca { void (i32*, { }, i32)*, {  } }
    %var_19 = load { void (i32*, { }, i32)*, {  } }, ptr %var_18
    %var_20 = insertvalue { void (i32*, { }, i32)*, {  } } %var_19, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_21 = insertvalue { void (i32*, { }, i32)*, {  } } %var_20, {  } %var_17, 1
    store { void (i32*, { }, i32)*, {  } } %var_21, ptr %var_18
    %var_23 = load i1, ptr @const_22
    br i1 %var_23, label %then25, label %else28
  then25: 
    %var_27 = load i32, ptr @const_26
    br label %if_rest24
  else28: 
    %var_30 = load i32, ptr @const_29
    br label %if_rest24
  if_rest24: 
    %var_31 = phi i32 [%var_27, %then25], [%var_30, %else28]
    %var_32 = extractvalue { void (i32*, { }, i32)*, {  } } %var_21, 0
    %var_33 = extractvalue { void (i32*, { }, i32)*, {  } } %var_21, 1
    %var_34 = alloca i32
    call void %var_32(i32* %var_34, { } %var_33, i32 %var_31)
    %var_35 = load i32, ptr %var_34
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_11, { } %var_12, i32 %var_13) {
  entry14: 
    %var_15 = call i32 @print_int(i32 %var_13)
    store i32 %var_15, ptr %var_11
    ret void
}
"
`;

exports[`structured programming compilation > if-then-else > stderr 1`] = `[]`;

exports[`structured programming compilation > if-then-else > stdout 1`] = `
[
  "456
",
]
`;

exports[`structured programming compilation > sequence > compiled 1`] = `
"@const_18 = constant i32 123
@const_20 = constant i32 234
@const_22 = constant i32 345
@const_24 = constant i32 456
define i32 @main() {
  main: 
    %var_12 = alloca {  }
    %var_13 = load {  }, ptr %var_12
    store {  } %var_13, ptr %var_12
    %var_14 = alloca { void (i32*, { }, i32)*, {  } }
    %var_15 = load { void (i32*, { }, i32)*, {  } }, ptr %var_14
    %var_16 = insertvalue { void (i32*, { }, i32)*, {  } } %var_15, void (i32*, { }, i32)* @print_int_wrap, 0
    %var_17 = insertvalue { void (i32*, { }, i32)*, {  } } %var_16, {  } %var_13, 1
    store { void (i32*, { }, i32)*, {  } } %var_17, ptr %var_14
    %var_19 = load i32, ptr @const_18
    %var_21 = load i32, ptr @const_20
    %var_23 = load i32, ptr @const_22
    %var_25 = load i32, ptr @const_24
    %var_26 = extractvalue { void (i32*, { }, i32)*, {  } } %var_17, 0
    %var_27 = extractvalue { void (i32*, { }, i32)*, {  } } %var_17, 1
    %var_28 = alloca i32
    call void %var_26(i32* %var_28, { } %var_27, i32 %var_25)
    %var_29 = load i32, ptr %var_28
    ret i32 0
}
declare i32 @print_int(i32)
define void @print_int_wrap(ptr sret(i32) %var_8, { } %var_9, i32 %var_10) {
  entry: 
    %var_11 = call i32 @print_int(i32 %var_10)
    store i32 %var_11, ptr %var_8
    ret void
}
"
`;

exports[`structured programming compilation > sequence > stderr 1`] = `[]`;

exports[`structured programming compilation > sequence > stdout 1`] = `
[
  "456
",
]
`;

exports[`structured programming compilation > two prints > compiled 1`] = `
"@const_17 = constant [13 x i8] c"hello world!\\00"
@const_28 = constant [15 x i8] c"hello world 2!\\00"
define i32 @main() {
  main: 
    %var_11 = alloca {  }
    %var_12 = load {  }, ptr %var_11
    store {  } %var_12, ptr %var_11
    %var_13 = alloca { void (i8**, { }, i8*)*, {  } }
    %var_14 = load { void (i8**, { }, i8*)*, {  } }, ptr %var_13
    %var_15 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_14, void (i8**, { }, i8*)* @print_string_wrap, 0
    %var_16 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_15, {  } %var_12, 1
    store { void (i8**, { }, i8*)*, {  } } %var_16, ptr %var_13
    %var_18 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_16, 0
    %var_19 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_16, 1
    %var_20 = alloca i8*
    call void %var_18(i8** %var_20, { } %var_19, i8* @const_17)
    %var_21 = load i8*, ptr %var_20
    %var_22 = alloca {  }
    %var_23 = load {  }, ptr %var_22
    store {  } %var_23, ptr %var_22
    %var_24 = alloca { void (i8**, { }, i8*)*, {  } }
    %var_25 = load { void (i8**, { }, i8*)*, {  } }, ptr %var_24
    %var_26 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_25, void (i8**, { }, i8*)* @print_string_wrap, 0
    %var_27 = insertvalue { void (i8**, { }, i8*)*, {  } } %var_26, {  } %var_23, 1
    store { void (i8**, { }, i8*)*, {  } } %var_27, ptr %var_24
    %var_29 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_27, 0
    %var_30 = extractvalue { void (i8**, { }, i8*)*, {  } } %var_27, 1
    %var_31 = alloca i8*
    call void %var_29(i8** %var_31, { } %var_30, i8* @const_28)
    %var_32 = load i8*, ptr %var_31
    ret i32 0
}
declare i8* @print_string(i8*)
define void @print_string_wrap(ptr sret(i8*) %var_7, { } %var_8, i8* %var_9) {
  entry: 
    %var_10 = call i8* @print_string(i8* %var_9)
    store i8* %var_10, ptr %var_7
    ret void
}
"
`;

exports[`structured programming compilation > two prints > stderr 1`] = `[]`;

exports[`structured programming compilation > two prints > stdout 1`] = `
[
  "hello world!
hello world 2!
",
]
`;
