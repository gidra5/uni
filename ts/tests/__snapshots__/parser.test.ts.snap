// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`comments > comment 1`] = `
{
  "children": [],
  "data": {},
  "name": "int",
  "value": 123,
}
`;

exports[`comments > comment block 1`] = `
{
  "children": [],
  "data": {},
  "name": "int",
  "value": 123,
}
`;

exports[`examples > procedural > fibonacci 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "fib",
            },
            {
              "children": [
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "n",
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "children": [],
                                  "data": {},
                                  "name": "name",
                                  "value": "n",
                                },
                                {
                                  "children": [],
                                  "data": {},
                                  "name": "int",
                                  "value": 2,
                                },
                              ],
                              "data": {},
                              "name": "operator",
                              "value": "<",
                            },
                            {
                              "children": [
                                {
                                  "children": [],
                                  "data": {},
                                  "name": "int",
                                  "value": 1,
                                },
                                {
                                  "children": [],
                                  "data": {},
                                  "name": "placeholder",
                                },
                              ],
                              "data": {},
                              "name": "operator",
                              "value": ";",
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "children": [],
                                      "data": {},
                                      "name": "name",
                                      "value": "fib",
                                    },
                                    {
                                      "children": [
                                        {
                                          "children": [
                                            {
                                              "children": [],
                                              "data": {},
                                              "name": "name",
                                              "value": "n",
                                            },
                                            {
                                              "children": [],
                                              "data": {},
                                              "name": "int",
                                              "value": 1,
                                            },
                                          ],
                                          "data": {},
                                          "name": "operator",
                                          "value": "-",
                                        },
                                      ],
                                      "data": {},
                                      "name": "group",
                                      "value": "parens",
                                    },
                                  ],
                                  "data": {},
                                  "name": "operator",
                                  "value": "application",
                                },
                                {
                                  "children": [
                                    {
                                      "children": [],
                                      "data": {},
                                      "name": "name",
                                      "value": "fib",
                                    },
                                    {
                                      "children": [
                                        {
                                          "children": [
                                            {
                                              "children": [],
                                              "data": {},
                                              "name": "name",
                                              "value": "n",
                                            },
                                            {
                                              "children": [],
                                              "data": {},
                                              "name": "int",
                                              "value": 2,
                                            },
                                          ],
                                          "data": {},
                                          "name": "operator",
                                          "value": "-",
                                        },
                                      ],
                                      "data": {},
                                      "name": "group",
                                      "value": "parens",
                                    },
                                  ],
                                  "data": {},
                                  "name": "operator",
                                  "value": "application",
                                },
                              ],
                              "data": {},
                              "name": "operator",
                              "value": "+",
                            },
                          ],
                          "data": {},
                          "name": "operator",
                          "value": "ifElse",
                        },
                        {
                          "children": [],
                          "data": {},
                          "name": "placeholder",
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": ";",
                    },
                  ],
                  "data": {},
                  "name": "group",
                  "value": "braces",
                },
              ],
              "data": {},
              "name": "operator",
              "value": "->",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ":=",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "export",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ";",
}
`;

exports[`examples > procedural > hello world 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "println",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "external",
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "args",
                },
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [],
                              "data": {},
                              "name": "name",
                              "value": "println",
                            },
                            {
                              "children": [],
                              "data": {},
                              "name": "string",
                              "value": "Hello, World!",
                            },
                          ],
                          "data": {},
                          "name": "operator",
                          "value": "application",
                        },
                        {
                          "children": [],
                          "data": {},
                          "name": "placeholder",
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": ";",
                    },
                  ],
                  "data": {},
                  "name": "group",
                  "value": "braces",
                },
              ],
              "data": {},
              "name": "operator",
              "value": "->",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "export",
        },
      ],
      "data": {},
      "name": "operator",
      "value": ";",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ";",
}
`;

exports[`expressions > arithmetics > add 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "+",
}
`;

exports[`expressions > arithmetics > decrement 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "prefixDecrement",
}
`;

exports[`expressions > arithmetics > divide 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "/",
}
`;

exports[`expressions > arithmetics > increment 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "prefixIncrement",
}
`;

exports[`expressions > arithmetics > modulo 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "%",
}
`;

exports[`expressions > arithmetics > multiply 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "*",
}
`;

exports[`expressions > arithmetics > negate 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "negate",
}
`;

exports[`expressions > arithmetics > postfix decrement 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "postfixDecrement",
}
`;

exports[`expressions > arithmetics > postfix increment 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "postfixIncrement",
}
`;

exports[`expressions > arithmetics > power 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "^",
}
`;

exports[`expressions > arithmetics > produces correct tree for '(2^2-5+7)-(-i)+ (j)/0 - 1*(1*f)+(27-x )/q + send(-(2+7)/A,j, i, 127.0 ) + 1/1' 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [],
                          "data": {},
                          "name": "int",
                          "value": 2,
                        },
                        {
                          "children": [],
                          "data": {},
                          "name": "int",
                          "value": 2,
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": "^",
                    },
                    {
                      "children": [],
                      "data": {},
                      "name": "int",
                      "value": 5,
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": "-",
                },
                {
                  "children": [],
                  "data": {},
                  "name": "int",
                  "value": 7,
                },
              ],
              "data": {},
              "name": "operator",
              "value": "+",
            },
          ],
          "data": {},
          "name": "group",
          "value": "parens",
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "i",
                },
              ],
              "data": {},
              "name": "operator",
              "value": "negate",
            },
          ],
          "data": {},
          "name": "group",
          "value": "parens",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "-",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "j",
                },
              ],
              "data": {},
              "name": "group",
              "value": "parens",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 0,
            },
          ],
          "data": {},
          "name": "operator",
          "value": "/",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "data": {},
                      "name": "int",
                      "value": 1,
                    },
                    {
                      "children": [],
                      "data": {},
                      "name": "name",
                      "value": "f",
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": "*",
                },
              ],
              "data": {},
              "name": "group",
              "value": "parens",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "*",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "-",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "data": {},
                  "name": "int",
                  "value": 27,
                },
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "x",
                },
              ],
              "data": {},
              "name": "operator",
              "value": "-",
            },
          ],
          "data": {},
          "name": "group",
          "value": "parens",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "q",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "/",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "send",
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "children": [],
                                  "data": {},
                                  "name": "int",
                                  "value": 2,
                                },
                                {
                                  "children": [],
                                  "data": {},
                                  "name": "int",
                                  "value": 7,
                                },
                              ],
                              "data": {},
                              "name": "operator",
                              "value": "+",
                            },
                          ],
                          "data": {},
                          "name": "group",
                          "value": "parens",
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": "negate",
                    },
                    {
                      "children": [],
                      "data": {},
                      "name": "name",
                      "value": "A",
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": "/",
                },
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "j",
                },
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "i",
                },
                {
                  "children": [],
                  "data": {},
                  "name": "float",
                  "value": 127,
                },
              ],
              "data": {},
              "name": "operator",
              "value": ",",
            },
          ],
          "data": {},
          "name": "group",
          "value": "parens",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "application",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 1,
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 1,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "/",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "+",
}
`;

exports[`expressions > arithmetics > produces correct tree for '-(a+b)' 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "a",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "b",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "+",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "negate",
}
`;

exports[`expressions > arithmetics > produces correct tree for '1 + 2^3 * 4' 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 1,
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 3,
            },
          ],
          "data": {},
          "name": "operator",
          "value": "^",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 4,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "*",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "+",
}
`;

exports[`expressions > arithmetics > subtract 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "-",
}
`;

exports[`expressions > boolean expressions > and 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "and",
}
`;

exports[`expressions > boolean expressions > and and or associativity 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "a",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "b",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "c",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "and",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "d",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "e",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "f",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "g",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "and",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "h",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "i",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "or",
}
`;

exports[`expressions > boolean expressions > comparators > comparator < 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "<",
}
`;

exports[`expressions > boolean expressions > comparators > comparator <= 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "<=",
}
`;

exports[`expressions > boolean expressions > comparators > comparator > 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": ">",
}
`;

exports[`expressions > boolean expressions > comparators > comparator >= 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": ">=",
}
`;

exports[`expressions > boolean expressions > comparators > range < < 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "inRange_<_<",
}
`;

exports[`expressions > boolean expressions > comparators > range < <= 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "inRange_<_<=",
}
`;

exports[`expressions > boolean expressions > comparators > range <= < 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "inRange_<=_<",
}
`;

exports[`expressions > boolean expressions > comparators > range <= <= 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "inRange_<=_<=",
}
`;

exports[`expressions > boolean expressions > comparators > range > > 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "inRange_>_>",
}
`;

exports[`expressions > boolean expressions > comparators > range > >= 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "inRange_>_>=",
}
`;

exports[`expressions > boolean expressions > comparators > range >= > 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "inRange_>=_>",
}
`;

exports[`expressions > boolean expressions > comparators > range >= >= 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "inRange_>=_>=",
}
`;

exports[`expressions > boolean expressions > deep equal 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "===",
}
`;

exports[`expressions > boolean expressions > deep not equal 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "!==",
}
`;

exports[`expressions > boolean expressions > equal 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "==",
}
`;

exports[`expressions > boolean expressions > in 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "in",
}
`;

exports[`expressions > boolean expressions > is 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "is",
}
`;

exports[`expressions > boolean expressions > not 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "!",
}
`;

exports[`expressions > boolean expressions > not equal 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "!=",
}
`;

exports[`expressions > boolean expressions > or 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "or",
}
`;

exports[`expressions > concurrent programming > async 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "f",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "async",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "application",
}
`;

exports[`expressions > concurrent programming > await 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "await",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 1,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "+",
}
`;

exports[`expressions > concurrent programming > await async 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "f",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "async",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "application",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "await",
}
`;

exports[`expressions > concurrent programming > channel receive 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "c",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "receive",
}
`;

exports[`expressions > concurrent programming > channel send 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "c",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "send",
}
`;

exports[`expressions > concurrent programming > channel try receive 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "c",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "peekReceive",
}
`;

exports[`expressions > concurrent programming > channel try send 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "c",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "peekSend",
}
`;

exports[`expressions > concurrent programming > parallel value 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "parallel",
}
`;

exports[`expressions > concurrent programming > parallel with channels 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "c",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 123,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "send",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "c",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "receive",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "parallel",
}
`;

exports[`expressions > concurrent programming > yield 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "yield",
}
`;

exports[`expressions > data structures > atom (global symbol) 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "atom",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "atom",
}
`;

exports[`expressions > data structures > channel 1`] = `
{
  "children": [],
  "data": {},
  "name": "group",
  "value": "channel",
}
`;

exports[`expressions > data structures > field access dynamic 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "y",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "accessDynamic",
}
`;

exports[`expressions > data structures > field access static 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "y",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "access",
}
`;

exports[`expressions > data structures > field assignment 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "y",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "access",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "=",
}
`;

exports[`expressions > data structures > field assignment dynamic 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "y",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "accessDynamic",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "=",
}
`;

exports[`expressions > data structures > map 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
          ],
          "data": {},
          "name": "group",
          "value": "brackets",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 2,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "label",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 3,
            },
          ],
          "data": {},
          "name": "group",
          "value": "brackets",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 4,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "label",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ",",
}
`;

exports[`expressions > data structures > map without braces 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
          ],
          "data": {},
          "name": "operator",
          "value": "+",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 3,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "label",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 4,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 5,
            },
          ],
          "data": {},
          "name": "operator",
          "value": "+",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 6,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "label",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ",",
}
`;

exports[`expressions > data structures > produces correct tree for '(-(2+7)/A,j, i, 127.0 )' 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [],
                          "data": {},
                          "name": "int",
                          "value": 2,
                        },
                        {
                          "children": [],
                          "data": {},
                          "name": "int",
                          "value": 7,
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": "+",
                    },
                  ],
                  "data": {},
                  "name": "group",
                  "value": "parens",
                },
              ],
              "data": {},
              "name": "operator",
              "value": "negate",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "A",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "/",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "j",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "i",
        },
        {
          "children": [],
          "data": {},
          "name": "float",
          "value": 127,
        },
      ],
      "data": {},
      "name": "operator",
      "value": ",",
    },
  ],
  "data": {},
  "name": "group",
  "value": "parens",
}
`;

exports[`expressions > data structures > record 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "a",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 1,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "label",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "b",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 2,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "label",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ",",
}
`;

exports[`expressions > data structures > set 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "set",
}
`;

exports[`expressions > data structures > symbol 1`] = `
{
  "children": [],
  "data": {},
  "name": "group",
  "value": "symbol",
}
`;

exports[`expressions > data structures > tuple 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 1,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 2,
    },
  ],
  "data": {},
  "name": "operator",
  "value": ",",
}
`;

exports[`expressions > data structures > unit 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "placeholder",
    },
  ],
  "data": {},
  "name": "group",
  "value": "parens",
}
`;

exports[`expressions > fixity expressions > group 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 1,
    },
  ],
  "data": {},
  "name": "group",
  "value": "parens",
}
`;

exports[`expressions > fixity expressions > infix 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "+",
}
`;

exports[`expressions > fixity expressions > mixfix 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 789,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "inRange_<_<",
}
`;

exports[`expressions > fixity expressions > name 1`] = `
{
  "children": [],
  "data": {},
  "name": "name",
  "value": "name",
}
`;

exports[`expressions > fixity expressions > postfix 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "postfixDecrement",
}
`;

exports[`expressions > fixity expressions > prefix 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "negate",
}
`;

exports[`expressions > function expressions > application > function call 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "f",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "application",
}
`;

exports[`expressions > function expressions > application > function call multiple args 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "f",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "application",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "y",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "application",
}
`;

exports[`expressions > function expressions > application > function call placeholder arg 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "f",
        },
        {
          "children": [],
          "data": {},
          "name": "placeholder",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "application",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "y",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "application",
}
`;

exports[`expressions > function expressions > application > function call placeholder args 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "f",
            },
            {
              "children": [],
              "data": {},
              "name": "placeholder",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "application",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "y",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "application",
    },
    {
      "children": [],
      "data": {},
      "name": "placeholder",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "application",
}
`;

exports[`expressions > function expressions > application > produces correct tree for '(send 1 2)(2, 3)' 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "send",
                },
                {
                  "children": [],
                  "data": {},
                  "name": "int",
                  "value": 1,
                },
              ],
              "data": {},
              "name": "operator",
              "value": "application",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
          ],
          "data": {},
          "name": "operator",
          "value": "application",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 3,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "application",
}
`;

exports[`expressions > function expressions > application > produces correct tree for '(send 1)(2, 3)' 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "send",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
          ],
          "data": {},
          "name": "operator",
          "value": "application",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 3,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "application",
}
`;

exports[`expressions > function expressions > application > produces correct tree for '(send)(2, 3)' 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "send",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 3,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "application",
}
`;

exports[`expressions > function expressions > application > produces correct tree for 'a + send (2, 3)' 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "a",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "send",
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "data": {},
                  "name": "int",
                  "value": 2,
                },
                {
                  "children": [],
                  "data": {},
                  "name": "int",
                  "value": 3,
                },
              ],
              "data": {},
              "name": "operator",
              "value": ",",
            },
          ],
          "data": {},
          "name": "group",
          "value": "parens",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "application",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "+",
}
`;

exports[`expressions > function expressions > application > produces correct tree for 'a + send 1 + 2' 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "a",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "send",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 1,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "application",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 2,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "+",
}
`;

exports[`expressions > function expressions > application > produces correct tree for 'send 1 (2, 3)' 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "send",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 1,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "application",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 3,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "application",
}
`;

exports[`expressions > function expressions > application > produces correct tree for 'send 1 + 2' 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "send",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 1,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "application",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 2,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "+",
}
`;

exports[`expressions > function expressions > application > produces correct tree for 'send a (2, 3)' 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "send",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "a",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "application",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 3,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "application",
}
`;

exports[`expressions > function expressions > application > produces correct tree for 'send((1+2), 3)' 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "data": {},
                      "name": "int",
                      "value": 1,
                    },
                    {
                      "children": [],
                      "data": {},
                      "name": "int",
                      "value": 2,
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": "+",
                },
              ],
              "data": {},
              "name": "group",
              "value": "parens",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 3,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "send",
}
`;

exports[`expressions > function expressions > application > produces correct tree for 'send(2, 3)' 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "send",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 3,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "application",
}
`;

exports[`expressions > function expressions > function 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "->",
}
`;

exports[`expressions > function expressions > function multiple params 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "y",
        },
      ],
      "data": {},
      "name": "operator",
      "value": ",",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "y",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "+",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "fn",
}
`;

exports[`expressions > function expressions > function with deep shadowed name access 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "a",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "a",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "a",
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "data": {},
                      "name": "name",
                      "value": "a",
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": "#",
                },
              ],
              "data": {},
              "name": "operator",
              "value": "#",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "fn",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "fn",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "fn",
}
`;

exports[`expressions > function expressions > function with no arg 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "placeholder",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 0,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "#",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "fn",
}
`;

exports[`expressions > function expressions > function with placeholder arg 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "placeholder",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 0,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "#",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "->",
}
`;

exports[`expressions > function expressions > function with shadowed name access 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "a",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "a",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "a",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "#",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "fn",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "fn",
}
`;

exports[`expressions > pattern matching > binding visible in scope where it is true 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "a",
                },
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "b",
                },
              ],
              "data": {},
              "name": "operator",
              "value": ",",
            },
          ],
          "data": {},
          "name": "group",
          "value": "parens",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "is",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "a",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "b",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
          ],
          "data": {},
          "name": "operator",
          "value": "+",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "==",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "and",
}
`;

exports[`expressions > pattern matching > in function parameters 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "x",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "y",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "y",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "+",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "->",
}
`;

exports[`expressions > pattern matching > match 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
          ],
          "data": {},
          "name": "operator",
          "value": "->",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 3,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 4,
            },
          ],
          "data": {},
          "name": "operator",
          "value": "->",
        },
      ],
      "data": {},
      "name": "operator",
      "value": ";",
    },
  ],
  "data": {},
  "name": "group",
  "value": "match",
}
`;

exports[`expressions > pattern matching > match that accepts tuple 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "data": {},
                      "name": "int",
                      "value": 1,
                    },
                    {
                      "children": [],
                      "data": {},
                      "name": "int",
                      "value": 2,
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": "->",
                },
              ],
              "data": {},
              "name": "group",
              "value": "parens",
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "data": {},
                      "name": "int",
                      "value": 3,
                    },
                    {
                      "children": [],
                      "data": {},
                      "name": "int",
                      "value": 4,
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": "->",
                },
              ],
              "data": {},
              "name": "group",
              "value": "parens",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "matchColon",
}
`;

exports[`expressions > pattern matching > set-theoretic patterns > pattern intersection 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "x",
                        },
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "x",
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": "label",
                    },
                    {
                      "children": [
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "y",
                        },
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "y",
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": "label",
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": ",",
                },
              ],
              "data": {},
              "name": "group",
              "value": "parens",
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "data": {},
                      "name": "name",
                      "value": "z",
                    },
                    {
                      "children": [],
                      "data": {},
                      "name": "name",
                      "value": "z",
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": "label",
                },
              ],
              "data": {},
              "name": "group",
              "value": "parens",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "and",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "y",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "z",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "+",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "->",
}
`;

exports[`expressions > pattern matching > set-theoretic patterns > pattern negation 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "x",
                        },
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "x",
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": "label",
                    },
                    {
                      "children": [
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "y",
                        },
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "y",
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": "label",
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": ",",
                },
              ],
              "data": {},
              "name": "group",
              "value": "parens",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "!",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "y",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "z",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "+",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "->",
}
`;

exports[`expressions > pattern matching > set-theoretic patterns > pattern union 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "x",
                        },
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "x",
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": "label",
                    },
                    {
                      "children": [
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "y",
                        },
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "y",
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": "label",
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": ",",
                },
              ],
              "data": {},
              "name": "group",
              "value": "parens",
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "y",
                        },
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "y",
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": "label",
                    },
                    {
                      "children": [
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "z",
                        },
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "z",
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": "label",
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": ",",
                },
              ],
              "data": {},
              "name": "group",
              "value": "parens",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "or",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "y",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "->",
}
`;

exports[`expressions > pattern matching > with 'is' operator 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "a",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "b",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "is",
}
`;

exports[`expressions > pattern matching > with default value 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "data": {},
                      "name": "name",
                      "value": "b",
                    },
                    {
                      "children": [],
                      "data": {},
                      "name": "int",
                      "value": 4,
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": "=",
                },
              ],
              "data": {},
              "name": "group",
              "value": "parens",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "a",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "is",
}
`;

exports[`expressions > pattern matching > with name for match 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "data": {},
                      "name": "name",
                      "value": "a",
                    },
                    {
                      "children": [],
                      "data": {},
                      "name": "name",
                      "value": "b",
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": ",",
                },
              ],
              "data": {},
              "name": "group",
              "value": "parens",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "c",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "@",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "is",
}
`;

exports[`expressions > pattern matching > with placeholder 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "placeholder",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "b",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "is",
}
`;

exports[`expressions > pattern matching > with rename 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "a",
                },
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "b",
                },
              ],
              "data": {},
              "name": "operator",
              "value": "@",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "c",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "is",
}
`;

exports[`expressions > pattern matching > with rest value 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "a",
            },
            {
              "children": [
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "b",
                },
              ],
              "data": {},
              "name": "operator",
              "value": "...",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "is",
}
`;

exports[`expressions > pattern matching > with rest value first 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "b",
                },
              ],
              "data": {},
              "name": "operator",
              "value": "...",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "a",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "is",
}
`;

exports[`expressions > pattern matching > with variable value 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "a",
                },
              ],
              "data": {},
              "name": "operator",
              "value": "pin",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "b",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "is",
}
`;

exports[`expressions > signals > derived 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "signal",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "x",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "y",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "+",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "application",
}
`;

exports[`expressions > signals > value 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "signal",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "application",
}
`;

exports[`expressions > structured programming > block 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "group",
  "value": "braces",
}
`;

exports[`expressions > structured programming > block mutable variable declaration 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "x",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "mut",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 123,
        },
      ],
      "data": {},
      "name": "operator",
      "value": ":=",
    },
  ],
  "data": {},
  "name": "group",
  "value": "braces",
}
`;

exports[`expressions > structured programming > block pattern matching 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "x",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "y",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 123,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 456,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "=",
    },
  ],
  "data": {},
  "name": "group",
  "value": "braces",
}
`;

exports[`expressions > structured programming > block variable assignment 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 123,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "=",
    },
  ],
  "data": {},
  "name": "group",
  "value": "braces",
}
`;

exports[`expressions > structured programming > block variable declaration 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 123,
        },
      ],
      "data": {},
      "name": "operator",
      "value": ":=",
    },
  ],
  "data": {},
  "name": "group",
  "value": "braces",
}
`;

exports[`expressions > structured programming > for loop 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 3,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "brackets",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "for",
}
`;

exports[`expressions > structured programming > for loop newline 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 3,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "group",
      "value": "brackets",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "for",
}
`;

exports[`expressions > structured programming > if-then 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "group",
      "value": "true",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "if",
}
`;

exports[`expressions > structured programming > if-then 2 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "y",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "data": {},
                  "name": "name",
                  "value": "x",
                },
                {
                  "children": [],
                  "data": {},
                  "name": "int",
                  "value": 25,
                },
              ],
              "data": {},
              "name": "operator",
              "value": ":=",
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "x",
                        },
                        {
                          "children": [],
                          "data": {},
                          "name": "int",
                          "value": 0,
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": "<",
                    },
                    {
                      "children": [
                        {
                          "children": [],
                          "data": {},
                          "name": "name",
                          "value": "x",
                        },
                      ],
                      "data": {},
                      "name": "operator",
                      "value": "break",
                    },
                    {
                      "children": [
                        {
                          "children": [
                            {
                              "children": [
                                {
                                  "children": [],
                                  "data": {},
                                  "name": "name",
                                  "value": "y",
                                },
                                {
                                  "children": [],
                                  "data": {},
                                  "name": "name",
                                  "value": "x",
                                },
                              ],
                              "data": {},
                              "name": "operator",
                              "value": ":=",
                            },
                            {
                              "children": [
                                {
                                  "children": [],
                                  "data": {},
                                  "name": "name",
                                  "value": "x",
                                },
                                {
                                  "children": [
                                    {
                                      "children": [],
                                      "data": {},
                                      "name": "name",
                                      "value": "x",
                                    },
                                    {
                                      "children": [],
                                      "data": {},
                                      "name": "int",
                                      "value": 1,
                                    },
                                  ],
                                  "data": {},
                                  "name": "operator",
                                  "value": "-",
                                },
                              ],
                              "data": {},
                              "name": "operator",
                              "value": "=",
                            },
                            {
                              "children": [
                                {
                                  "children": [
                                    {
                                      "children": [],
                                      "data": {},
                                      "name": "name",
                                      "value": "y",
                                    },
                                    {
                                      "children": [],
                                      "data": {},
                                      "name": "int",
                                      "value": 19,
                                    },
                                  ],
                                  "data": {},
                                  "name": "operator",
                                  "value": "==",
                                },
                                {
                                  "children": [
                                    {
                                      "children": [],
                                      "data": {},
                                      "name": "int",
                                      "value": 69,
                                    },
                                  ],
                                  "data": {},
                                  "name": "operator",
                                  "value": "continue",
                                },
                              ],
                              "data": {},
                              "name": "operator",
                              "value": "if",
                            },
                            {
                              "children": [],
                              "data": {},
                              "name": "name",
                              "value": "y",
                            },
                          ],
                          "data": {},
                          "name": "operator",
                          "value": ";",
                        },
                      ],
                      "data": {},
                      "name": "group",
                      "value": "braces",
                    },
                  ],
                  "data": {},
                  "name": "operator",
                  "value": "ifElse",
                },
              ],
              "data": {},
              "name": "operator",
              "value": "loop",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ";",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ":=",
}
`;

exports[`expressions > structured programming > if-then newline 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "group",
      "value": "true",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "if",
}
`;

exports[`expressions > structured programming > if-then newline-else 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "group",
      "value": "true",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "ifElse",
}
`;

exports[`expressions > structured programming > if-then newline-else newline 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "group",
      "value": "true",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "ifElse",
}
`;

exports[`expressions > structured programming > if-then-else 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "group",
      "value": "true",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 456,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "ifElse",
}
`;

exports[`expressions > structured programming > if-then-elseif-then-else 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "group",
      "value": "true",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "group",
          "value": "false",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 789,
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 456,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "ifElse",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "ifElse",
}
`;

exports[`expressions > structured programming > labeled expression 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "label",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "label",
}
`;

exports[`expressions > structured programming > loop 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "loop",
}
`;

exports[`expressions > structured programming > return 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "placeholder",
        },
      ],
      "data": {},
      "name": "group",
      "value": "parens",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 123,
            },
          ],
          "data": {},
          "name": "operator",
          "value": "return",
        },
      ],
      "data": {},
      "name": "group",
      "value": "braces",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "->",
}
`;

exports[`expressions > structured programming > while loop 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "group",
      "value": "true",
    },
    {
      "children": [],
      "data": {},
      "name": "int",
      "value": 123,
    },
  ],
  "data": {},
  "name": "operator",
  "value": "while",
}
`;

exports[`expressions > structured programming > while loop break 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "group",
      "value": "true",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "placeholder",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "break",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "while",
}
`;

exports[`expressions > structured programming > while loop break value 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "group",
      "value": "true",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 1,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "break",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "while",
}
`;

exports[`expressions > structured programming > while loop continue 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "group",
      "value": "true",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "placeholder",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "continue",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "while",
}
`;

exports[`expressions > structured programming > while loop continue value 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "group",
      "value": "true",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 1,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "continue",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "while",
}
`;

exports[`expressions > values > false 1`] = `
{
  "children": [],
  "data": {},
  "name": "group",
  "value": "false",
}
`;

exports[`expressions > values > float 1`] = `
{
  "children": [],
  "data": {},
  "name": "float",
  "value": 123.456,
}
`;

exports[`expressions > values > integer 1`] = `
{
  "children": [],
  "data": {},
  "name": "int",
  "value": 123,
}
`;

exports[`expressions > values > string 1`] = `
{
  "children": [],
  "data": {},
  "name": "string",
  "value": "string",
}
`;

exports[`expressions > values > true 1`] = `
{
  "children": [],
  "data": {},
  "name": "group",
  "value": "true",
}
`;

exports[`newline handling > block newline at the beginning 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "a",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ":=",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "b",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ":=",
        },
      ],
      "data": {},
      "name": "operator",
      "value": ";",
    },
  ],
  "data": {},
  "name": "group",
  "value": "braces",
}
`;

exports[`newline handling > block newline at the end 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "a",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ":=",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "b",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ":=",
        },
        {
          "children": [],
          "data": {},
          "name": "placeholder",
        },
      ],
      "data": {},
      "name": "operator",
      "value": ";",
    },
  ],
  "data": {},
  "name": "group",
  "value": "braces",
}
`;

exports[`newline handling > block newline in the middle 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "a",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ":=",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "b",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ":=",
        },
      ],
      "data": {},
      "name": "operator",
      "value": ";",
    },
  ],
  "data": {},
  "name": "group",
  "value": "braces",
}
`;

exports[`newline handling > block semicolon newline 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "a",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ":=",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "b",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ":=",
        },
      ],
      "data": {},
      "name": "operator",
      "value": ";",
    },
  ],
  "data": {},
  "name": "group",
  "value": "braces",
}
`;

exports[`newline handling > block semicolon newline at the end 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "a",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ":=",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "b",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ":=",
        },
        {
          "children": [],
          "data": {},
          "name": "placeholder",
        },
      ],
      "data": {},
      "name": "operator",
      "value": ";",
    },
  ],
  "data": {},
  "name": "group",
  "value": "braces",
}
`;

exports[`programs > module > export main 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "args",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "placeholder",
            },
          ],
          "data": {},
          "name": "group",
          "value": "braces",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "->",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "export",
}
`;

exports[`programs > module > external 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "y",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "external",
}
`;

exports[`programs > module > import 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "string",
      "value": "a",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "b",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "import",
}
`;

exports[`programs > module > import with 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "string",
      "value": "a",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "b",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "c",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "importWith",
}
`;

exports[`programs > module > import with external 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "string",
      "value": "a",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "b",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "c",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "external",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "importWith",
}
`;

exports[`programs > module > operator 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "placeholder",
            },
            {
              "children": [],
              "data": {},
              "name": "placeholder",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "+",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "operator",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "x",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "y",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "x",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "y",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "+",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "fn",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ":=",
}
`;

exports[`programs > module > operator with precedence 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "placeholder",
            },
            {
              "children": [],
              "data": {},
              "name": "placeholder",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "+",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 1,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "operatorPrecedence",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "x",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "y",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "x",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "y",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "+",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "fn",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ":=",
}
`;

exports[`programs > module > operator with tuple precedence 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "placeholder",
            },
            {
              "children": [],
              "data": {},
              "name": "placeholder",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "+",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 1,
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 2,
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "operatorPrecedence",
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "x",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "y",
            },
          ],
          "data": {},
          "name": "operator",
          "value": ",",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "x",
            },
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "y",
            },
          ],
          "data": {},
          "name": "operator",
          "value": "+",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "fn",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ":=",
}
`;

exports[`programs > module > private declare 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "z",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "y",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 1,
        },
      ],
      "data": {},
      "name": "operator",
      "value": "+",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ":=",
}
`;

exports[`programs > module > public declare 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [
            {
              "children": [],
              "data": {},
              "name": "name",
              "value": "z",
            },
            {
              "children": [],
              "data": {},
              "name": "int",
              "value": 123,
            },
          ],
          "data": {},
          "name": "operator",
          "value": "+",
        },
      ],
      "data": {},
      "name": "operator",
      "value": ":=",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "export",
}
`;

exports[`programs > script > export 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "export",
}
`;

exports[`programs > script > export as 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "y",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "exportAs",
}
`;

exports[`programs > script > use 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "string",
      "value": "a",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "b",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "use",
}
`;

exports[`programs > script > use with 1`] = `
{
  "children": [
    {
      "children": [],
      "data": {},
      "name": "string",
      "value": "a",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "b",
    },
    {
      "children": [],
      "data": {},
      "name": "name",
      "value": "x",
    },
  ],
  "data": {},
  "name": "operator",
  "value": "useWith",
}
`;

exports[`programs > script > variable export 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 123,
        },
      ],
      "data": {},
      "name": "operator",
      "value": ":=",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "export",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ";",
}
`;

exports[`programs > script > variable export as 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 123,
        },
      ],
      "data": {},
      "name": "operator",
      "value": ":=",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "y",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "exportAs",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ";",
}
`;

exports[`programs > script > variable use 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 123,
        },
      ],
      "data": {},
      "name": "operator",
      "value": ":=",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "string",
          "value": "a",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "b",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "use",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ";",
}
`;

exports[`programs > script > variable use with 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
        {
          "children": [],
          "data": {},
          "name": "int",
          "value": 123,
        },
      ],
      "data": {},
      "name": "operator",
      "value": ":=",
    },
    {
      "children": [
        {
          "children": [],
          "data": {},
          "name": "string",
          "value": "a",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "b",
        },
        {
          "children": [],
          "data": {},
          "name": "name",
          "value": "x",
        },
      ],
      "data": {},
      "name": "operator",
      "value": "useWith",
    },
  ],
  "data": {},
  "name": "operator",
  "value": ";",
}
`;
